{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the HIE Data Exchange Workflows Knowledge Base! Documentation Steward: The Digital Initiatives Group at I-TECH (DIGI), University of Washington The purpose of this website is to share our approach to setting up some of the common standards-based HIE workflows using digital health solutions that have been utilized in low-to-middle income countries. This is not intended to be a comprehensive guide for all HIE workflows in a healthcare environment, nor to assume this is the only approach that can be taken. We welcome any and all feedback to improve the site, or to update the approach. Location The documentation code is hosted here: https://github.com/I-TECH-UW/healthinformationexchange","title":"Introduction"},{"location":"index.html#welcome-to-the-hie-data-exchange-workflows-knowledge-base","text":"Documentation Steward: The Digital Initiatives Group at I-TECH (DIGI), University of Washington The purpose of this website is to share our approach to setting up some of the common standards-based HIE workflows using digital health solutions that have been utilized in low-to-middle income countries. This is not intended to be a comprehensive guide for all HIE workflows in a healthcare environment, nor to assume this is the only approach that can be taken. We welcome any and all feedback to improve the site, or to update the approach. Location The documentation code is hosted here: https://github.com/I-TECH-UW/healthinformationexchange","title":"Welcome to the HIE Data Exchange Workflows Knowledge Base!"},{"location":"about.html","text":"About Our Team The Digital Initiatives Group (DIGI) is a global health informatics center housed within the I-TECH organization at the University of Washington. Our team specializes in health information exchange, and specifically laboratory informatics and exchanges, in resource constrained environments. We work at the informatics domain level, developing global goods and publishing internationally accepted informatics standards; and support the countries and implementers applying those in national health programs across the globe. We are collaborators at heart, so please join us in innovating on improvements to the work and the documentation here. For more information about our team and portfolio, please click here to visit our UW I-TECH DIGI page","title":"About"},{"location":"about.html#about-our-team","text":"The Digital Initiatives Group (DIGI) is a global health informatics center housed within the I-TECH organization at the University of Washington. Our team specializes in health information exchange, and specifically laboratory informatics and exchanges, in resource constrained environments. We work at the informatics domain level, developing global goods and publishing internationally accepted informatics standards; and support the countries and implementers applying those in national health programs across the globe. We are collaborators at heart, so please join us in innovating on improvements to the work and the documentation here. For more information about our team and portfolio, please click here to visit our UW I-TECH DIGI page","title":"About Our Team"},{"location":"demo-directory.html","text":"Directory of Demo Servers Here is the documentation of all the demo servers run under The Digital Initiatives Group at I-TECH (DIGI) These are classified by the project names which include the following:- Haiti SEDISH - Syst\u00e8me d\u2019\u00c9change d\u2019Information Sanitaire Ha\u00eftien Github: https://github.com/I-TECH-UW/sedish-haiti.org Workflows Supported: - Continuum of Care - Patient Search and Registration - LNSP Lab Order Interoperability Service Link Username Password OpenCR Client Registry UI https://opencr.sedish-haiti.org/crux/#/Login root@intrahealth.org intrahealth iSantePlus - Haiti OpenMRS Distribution Github: https://github.com/IsantePlus/openmrs-distro-isanteplus Service Link Username Password iSantePlus Demo Server #1 https://isanteplus.sedish-haiti.org/openmrs/ admin Admin123 iSantePlus Demo Server #2 http://isanteplusdemo.com:8080/openmrs/ admin Admin123 iSantePlus 3.x Demo Server http://iplus3.openelis-global.org/ admin Admin123 Cote d'Ivoire Cote d'Ivoire HIE Service Link Username Password OpenCR Client Registry UI https://tap-demo.openelisci.org/crux/#/Login root@intrahealth.org intrahealth SIGDEP3 - Cote d'Ivoire OpenMRS Distribution Service Link Username Password SIGDEP3 Demo Server #1 https://tap-demo.openelisci.org/openmrs/ SIGDEP3 Demo Server #2 http://35.85.179.171:8090/openmrs/ Botswana Botswana HIE Demo Service Link Username Password | OpenCR Client Registry UI | https://opencr.bwhie.org/crux/#/Login | root@intrahealth.org | intrahealth | | Registry API | https://omang-api.bwhie.org/ | | | | HL7 to FHIR Converter | https://converter.bwhie.org/ | | | OpenELIS Server Link Username Password OpenELIS Testing Server OpenELIS Testing Server admin adminADMIN! Ozone Implementation Server Link Username Password Openmrs 3.x Openmrs 3.x admin Admin123 Openmrs Openmrs Legacy UI admin Admin123 OpenELis Global LIS admin adminADMIN! Odoo Odoo admin admin Superset Superset admin password OpenHIM http://ozone.uwdigi.org:3000 OpenHIM root@openhim.org admin Jamaica Jamaican mHealth two-way texting Service Link Username Password CHT https://cht.openelis-global.org/#/contacts medic password","title":"Demo Servers"},{"location":"demo-directory.html#directory-of-demo-servers","text":"Here is the documentation of all the demo servers run under The Digital Initiatives Group at I-TECH (DIGI) These are classified by the project names which include the following:-","title":"Directory of Demo Servers"},{"location":"demo-directory.html#haiti","text":"","title":"Haiti"},{"location":"demo-directory.html#sedish-systeme-dechange-dinformation-sanitaire-haitien","text":"Github: https://github.com/I-TECH-UW/sedish-haiti.org Workflows Supported: - Continuum of Care - Patient Search and Registration - LNSP Lab Order Interoperability Service Link Username Password OpenCR Client Registry UI https://opencr.sedish-haiti.org/crux/#/Login root@intrahealth.org intrahealth","title":"SEDISH - Syst\u00e8me d\u2019\u00c9change d\u2019Information Sanitaire Ha\u00eftien"},{"location":"demo-directory.html#isanteplus-haiti-openmrs-distribution","text":"Github: https://github.com/IsantePlus/openmrs-distro-isanteplus Service Link Username Password iSantePlus Demo Server #1 https://isanteplus.sedish-haiti.org/openmrs/ admin Admin123 iSantePlus Demo Server #2 http://isanteplusdemo.com:8080/openmrs/ admin Admin123 iSantePlus 3.x Demo Server http://iplus3.openelis-global.org/ admin Admin123","title":"iSantePlus - Haiti OpenMRS Distribution"},{"location":"demo-directory.html#cote-divoire","text":"","title":"Cote d'Ivoire"},{"location":"demo-directory.html#cote-divoire-hie","text":"Service Link Username Password OpenCR Client Registry UI https://tap-demo.openelisci.org/crux/#/Login root@intrahealth.org intrahealth","title":"Cote d'Ivoire HIE"},{"location":"demo-directory.html#sigdep3-cote-divoire-openmrs-distribution","text":"Service Link Username Password SIGDEP3 Demo Server #1 https://tap-demo.openelisci.org/openmrs/ SIGDEP3 Demo Server #2 http://35.85.179.171:8090/openmrs/","title":"SIGDEP3 - Cote d'Ivoire OpenMRS Distribution"},{"location":"demo-directory.html#botswana","text":"","title":"Botswana"},{"location":"demo-directory.html#botswana-hie-demo","text":"Service Link Username Password | OpenCR Client Registry UI | https://opencr.bwhie.org/crux/#/Login | root@intrahealth.org | intrahealth | | Registry API | https://omang-api.bwhie.org/ | | | | HL7 to FHIR Converter | https://converter.bwhie.org/ | | |","title":"Botswana HIE Demo"},{"location":"demo-directory.html#openelis","text":"Server Link Username Password OpenELIS Testing Server OpenELIS Testing Server admin adminADMIN!","title":"OpenELIS"},{"location":"demo-directory.html#ozone-implementation","text":"Server Link Username Password Openmrs 3.x Openmrs 3.x admin Admin123 Openmrs Openmrs Legacy UI admin Admin123 OpenELis Global LIS admin adminADMIN! Odoo Odoo admin admin Superset Superset admin password OpenHIM http://ozone.uwdigi.org:3000 OpenHIM root@openhim.org admin","title":"Ozone Implementation"},{"location":"demo-directory.html#jamaica","text":"","title":"Jamaica"},{"location":"demo-directory.html#jamaican-mhealth-two-way-texting","text":"Service Link Username Password CHT https://cht.openelis-global.org/#/contacts medic password","title":"Jamaican mHealth two-way texting"},{"location":"deployomrs.html","text":"Lab Orders and Results exchange between OpenMRS and OpenELIS The Lab Order workflow between OpenELIS and OpenMRS will use the OpenMRS FHIR Workflow Module and suggested Communication Patterns to implement the ordering of lab tests from OpenMRS to OpenELIS and the returning the results to OpenMRS. The current communication workflow uses HL7 V2.5.1 messages as documented here: ( https://github.com/openelisglobal/openelisglobal-core/wiki/Result-Reporting ). This functionality is implemented in openmrs-module-labintegration , an OpenMRS module made for an implementation of OpenMRS deployed in Haiti called iSantePlus . Communication Overview Implementation Guide iSant\u00e9Plus Install iSantePlus using one of the following approaches: Docker: https://github.com/IsantePlus/isanteplus-docker Apache Tomcat WAR: SOP iSantePlus Installation.docx Install the OpenMRS FHIR module using the following omod file: openmrs-module-fhir2.omod Install the iSantePlus Lab on FHIR module using the following omod file: labonfhir-1.0.0-SNAPSHOT.omod Restart iSantePlus Start up the OpenELIS Update Task in System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler OpenELIS Global 2.x Install OpenELIS Global 2.x using the instructions HERE Navigate to the \"results reporting\" configuration: https://IPforyourserver:8443/OpenELIS-Global/ResultReportingConfiguration.do Move the radio button for Result Reporting to \"Enable\" and enter in the URL for the OpenMRS connection like in the example below. Please note, the Test URL button may not respond to the FHIR module, so please disregard any errors if you click it. Click Save at the bottom of the page. Required FHIR Resources Task more info The Task resource is created along with the corresponding ServiceRequest resource when a clinician creates a TestOrder and decides to send it to OpenELIS. This resource is used to track the status of the lab order request from initiation to completion, and as a container for all other resources related to the given order. Example Task: { \"resourceType\": \"Task\", \"id\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\", \"identifier\": [ { \"system\": \"http://isanteplus.org/ext/task/identifier\", \"value\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\" } ], \"basedOn\": [ { \"reference\": \"ServiceRequest/ebf83ba0-9d3c-497f-9aa0-d839ec506202\", \"type\": \"ServiceRequest\" }, { \"reference\": \"ServiceRequest/73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"type\": \"ServiceRequest\" } ], \"status\": \"requested\", \"intent\": \"order\", \"for\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" }, \"authoredOn\": \"2020-04-28T17:33:19+00:00\", \"owner\": { \"reference\": \"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\", \"type\": \"Practitioner\" } } ServiceRequest more info The ServiceRequest resource represents the TestOrder placed in OpenMRS. It is referenced from the Task with the Task.basedOn element, and sent to OpenELIS with the Task to initiate the processing of the order. Example Service Request: { \"resourceType\": \"ServiceRequest\", \"id\": \"73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"status\": \"active\", \"intent\": \"order\", \"code\": { \"coding\": [ { \"code\": \"790AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"14682-9\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"790\" } ] }, \"subject\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" } } DiagnosticReport more info The DiagnosticReport resource is the container for the results of an Order, and holds these results in the DiagnosticReport.result element as references to Observation resources. Example Diagnostic Report { \"resourceType\": \"DiagnosticReport\", \"id\": \"93\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.163+00:00\", \"source\": \"#55t4lpDZF4q3TCZ0\" }, \"text\": { \"status\": \"generated\", \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><div class=\\\"hapiHeaderText\\\"> Untitled Diagnostic Report </div><table class=\\\"hapiPropertyTable\\\"><tbody><tr><td>Status</td><td>FINAL</td></tr></tbody></table></div>\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"result\": [ { \"reference\": \"Observation/92\", \"type\": \"Observation\" } ] } Observation more info The Observation resource contains the results of the Lab Order request. Example Observation: { \"resourceType\": \"Observation\", \"id\": \"92\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.124+00:00\", \"source\": \"#xAVz0uUE6c3l42Za\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"valueQuantity\": { \"value\": 55, \"unit\": \"UI/L\" } } Patient more info The Patient resource contains vital information for OpenELIS to fullfill the lab order request, and is referenced by the Task. Example Patient: { \"resourceType\": \"Patient\", \"id\": \"e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"identifier\": [ { \"id\": \"5981a256-d60c-44b1-beae-9bdd2cf572f8\", \"use\": \"official\", \"system\": \"iSantePlus ID\", \"value\": \"10012R\" }, { \"id\": \"75a67d54-6fff-44d1-9c3e-2116c967b475\", \"use\": \"usual\", \"system\": \"Code National\", \"value\": \"100000\" }, { \"id\": \"29447d21-3cd6-42a9-9ab2-79ebfa710a01\", \"use\": \"usual\", \"system\": \"ECID\", \"value\": \"04d759e0-5d02-11e8-b899-0242ac12000b\" } ], \"active\": true, \"name\": [ { \"id\": \"511275de-e301-44a3-95d2-28d0d3b35387\", \"family\": \"Mankowski\", \"given\": [ \"Piotr\" ] } ], \"gender\": \"male\", \"birthDate\": \"1987-01-01\", \"deceasedBoolean\": false, \"address\": [ { \"id\": \"d4f7c809-3d01-4032-b64d-4c22e8eccbbc\", \"use\": \"home\", \"country\": \"Haiti\" } ] } Relevant FHIR Docs Using Tasks in a RESTful Context Workflow Module Diagnostic Module Example: Workflow states for a lab order for a blood test Option G: POST of Task to fulfiller's system Relevant OpenMRS Talk Posts The handling and mapping of lab order status for the lab workflow","title":"Lab Orders and Results exchange between OpenMRS and OpenELIS"},{"location":"deployomrs.html#lab-orders-and-results-exchange-between-openmrs-and-openelis","text":"The Lab Order workflow between OpenELIS and OpenMRS will use the OpenMRS FHIR Workflow Module and suggested Communication Patterns to implement the ordering of lab tests from OpenMRS to OpenELIS and the returning the results to OpenMRS. The current communication workflow uses HL7 V2.5.1 messages as documented here: ( https://github.com/openelisglobal/openelisglobal-core/wiki/Result-Reporting ). This functionality is implemented in openmrs-module-labintegration , an OpenMRS module made for an implementation of OpenMRS deployed in Haiti called iSantePlus .","title":"Lab Orders and Results exchange between OpenMRS and OpenELIS"},{"location":"deployomrs.html#communication-overview","text":"","title":"Communication Overview"},{"location":"deployomrs.html#implementation-guide","text":"","title":"Implementation Guide"},{"location":"deployomrs.html#isanteplus","text":"Install iSantePlus using one of the following approaches: Docker: https://github.com/IsantePlus/isanteplus-docker Apache Tomcat WAR: SOP iSantePlus Installation.docx Install the OpenMRS FHIR module using the following omod file: openmrs-module-fhir2.omod Install the iSantePlus Lab on FHIR module using the following omod file: labonfhir-1.0.0-SNAPSHOT.omod Restart iSantePlus Start up the OpenELIS Update Task in System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler","title":"iSant\u00e9Plus"},{"location":"deployomrs.html#openelis-global-2x","text":"Install OpenELIS Global 2.x using the instructions HERE Navigate to the \"results reporting\" configuration: https://IPforyourserver:8443/OpenELIS-Global/ResultReportingConfiguration.do Move the radio button for Result Reporting to \"Enable\" and enter in the URL for the OpenMRS connection like in the example below. Please note, the Test URL button may not respond to the FHIR module, so please disregard any errors if you click it. Click Save at the bottom of the page.","title":"OpenELIS Global 2.x"},{"location":"deployomrs.html#required-fhir-resources","text":"","title":"Required FHIR Resources"},{"location":"deployomrs.html#task","text":"more info The Task resource is created along with the corresponding ServiceRequest resource when a clinician creates a TestOrder and decides to send it to OpenELIS. This resource is used to track the status of the lab order request from initiation to completion, and as a container for all other resources related to the given order. Example Task: { \"resourceType\": \"Task\", \"id\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\", \"identifier\": [ { \"system\": \"http://isanteplus.org/ext/task/identifier\", \"value\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\" } ], \"basedOn\": [ { \"reference\": \"ServiceRequest/ebf83ba0-9d3c-497f-9aa0-d839ec506202\", \"type\": \"ServiceRequest\" }, { \"reference\": \"ServiceRequest/73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"type\": \"ServiceRequest\" } ], \"status\": \"requested\", \"intent\": \"order\", \"for\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" }, \"authoredOn\": \"2020-04-28T17:33:19+00:00\", \"owner\": { \"reference\": \"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\", \"type\": \"Practitioner\" } }","title":"Task"},{"location":"deployomrs.html#servicerequest","text":"more info The ServiceRequest resource represents the TestOrder placed in OpenMRS. It is referenced from the Task with the Task.basedOn element, and sent to OpenELIS with the Task to initiate the processing of the order. Example Service Request: { \"resourceType\": \"ServiceRequest\", \"id\": \"73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"status\": \"active\", \"intent\": \"order\", \"code\": { \"coding\": [ { \"code\": \"790AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"14682-9\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"790\" } ] }, \"subject\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" } }","title":"ServiceRequest"},{"location":"deployomrs.html#diagnosticreport","text":"more info The DiagnosticReport resource is the container for the results of an Order, and holds these results in the DiagnosticReport.result element as references to Observation resources. Example Diagnostic Report { \"resourceType\": \"DiagnosticReport\", \"id\": \"93\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.163+00:00\", \"source\": \"#55t4lpDZF4q3TCZ0\" }, \"text\": { \"status\": \"generated\", \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><div class=\\\"hapiHeaderText\\\"> Untitled Diagnostic Report </div><table class=\\\"hapiPropertyTable\\\"><tbody><tr><td>Status</td><td>FINAL</td></tr></tbody></table></div>\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"result\": [ { \"reference\": \"Observation/92\", \"type\": \"Observation\" } ] }","title":"DiagnosticReport"},{"location":"deployomrs.html#observation","text":"more info The Observation resource contains the results of the Lab Order request. Example Observation: { \"resourceType\": \"Observation\", \"id\": \"92\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.124+00:00\", \"source\": \"#xAVz0uUE6c3l42Za\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"valueQuantity\": { \"value\": 55, \"unit\": \"UI/L\" } }","title":"Observation"},{"location":"deployomrs.html#patient","text":"more info The Patient resource contains vital information for OpenELIS to fullfill the lab order request, and is referenced by the Task. Example Patient: { \"resourceType\": \"Patient\", \"id\": \"e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"identifier\": [ { \"id\": \"5981a256-d60c-44b1-beae-9bdd2cf572f8\", \"use\": \"official\", \"system\": \"iSantePlus ID\", \"value\": \"10012R\" }, { \"id\": \"75a67d54-6fff-44d1-9c3e-2116c967b475\", \"use\": \"usual\", \"system\": \"Code National\", \"value\": \"100000\" }, { \"id\": \"29447d21-3cd6-42a9-9ab2-79ebfa710a01\", \"use\": \"usual\", \"system\": \"ECID\", \"value\": \"04d759e0-5d02-11e8-b899-0242ac12000b\" } ], \"active\": true, \"name\": [ { \"id\": \"511275de-e301-44a3-95d2-28d0d3b35387\", \"family\": \"Mankowski\", \"given\": [ \"Piotr\" ] } ], \"gender\": \"male\", \"birthDate\": \"1987-01-01\", \"deceasedBoolean\": false, \"address\": [ { \"id\": \"d4f7c809-3d01-4032-b64d-4c22e8eccbbc\", \"use\": \"home\", \"country\": \"Haiti\" } ] }","title":"Patient"},{"location":"deployomrs.html#relevant-fhir-docs","text":"Using Tasks in a RESTful Context Workflow Module Diagnostic Module Example: Workflow states for a lab order for a blood test Option G: POST of Task to fulfiller's system","title":"Relevant FHIR Docs"},{"location":"deployomrs.html#relevant-openmrs-talk-posts","text":"The handling and mapping of lab order status for the lab workflow","title":"Relevant OpenMRS Talk Posts"},{"location":"faq.html","text":"","title":"FAQ"},{"location":"fr-workflows.html","text":"","title":"Fr workflows"},{"location":"get-additional-help.html","text":"","title":"Get Additional Help"},{"location":"hie-workflows.html","text":"HIE Overview","title":"HIE Overview"},{"location":"hie-workflows.html#hie-overview","text":"","title":"HIE Overview"},{"location":"mpi-workflows.html","text":"Demo Videos SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching","title":"Client Registry / MPI Workflows"},{"location":"mpi-workflows.html#demo-videos","text":"SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching","title":"Demo Videos"},{"location":"country-guides/index.html","text":"Country-specific Project Index Overview This guide provides a starting point for learning about the Country Specific Health Information Exchange (HIE) . These projects are based on the OpenHIE Architecture and use the Instant OpenHIE V2 tooling to for packaging, deployment, and horizontal scalability. Currently, the HIE consists of core components of the HIE architecture customized to each country's context, as well as components supporting the following target workflows: - Patient Identity Management - Laboratory Order and Result Management - Data Analytics As these projects leverage a number of open standards and global goods (OpenHIE, FHIR, HIE IGs, etc.), this documentation contains a number of references to useful external resources. HIE Components Index Interoperability Layer The Interoperability Layer (IOL) is the core component of the OpenHIE architecture responsible for securely routing messages between the various other components of the HIE, and providing the entrypoint interface for external point-of-service clients. IOL OpenHIE Documentation Client Registry (Master Patient Index) The Client Registry (CR) is responsible for linking and managing the identities of patients across the health system. Client Registry OpenHIE Documentation Shared Health Record The Shared Health Record (SHR) service stores the longitudal health record for each patient from across the health system. This component supports workflows that require access to a shared central repository of patient data, such and laboratory order and result workflows. SHR OpenHIE Documentation Terminology Service The Terminology Service (TS) is responsible for managing terminology collections from across the health system and their mappings to standard terminologies. Terminology Service OpenHIE Documentation Facility Registry (Master Facility List):** The Facility Registry (FR) or Master Facility List (MFL) is responsible for managing the list of facilities and their health services across the health system. Facility Registry OpenHIE Documentation Other OpenHIM Mediators The CR and SHR run as OpenHIM mediators. In addition, the following mediators are used to support the HIE workflows: FHIR Converter : This mediator is responsible for converting FHIR messages to HL7 messages and vice versa. This mediator is implemented here: https://github.com/I-TECH-UW/openhim-mediator-fhir-converter Common OpenHIE Instant V2 Components These components are used across HIE implementations and packaged using Instant OpenHIE V2. A number were based on or inspired by the Jembi platform project: https://github.com/jembi/platform Point of Service (Externally Managed Services) These integrations include both point-of-service systems like EMRs and LIMs, as well as HIE components like the Facility Registry. HIE Components Tooling Interoperability Layer ( OpenHIM ) Client Registry (Master Patient Index) ( OpenCR ) Shared Health Record ( SHR ) Terminology Service ( Open Concept Lab ) Facility Registry (Master Facility List):** ( GoFR ) Botswana HIE Link to Github Repository Architecture The Botswana HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Botswana HIE project. Additional HIE Components Omang, BDRS, and Immigration API : This mediator provides and interface for the Omang, BDRS, and Immigration databases. This mediator is implemented here (private repository): https://github.com/I-TECH-UW/OmangSVC Reverse Proxies Nginx Traefik Caddy with WAF Kafka: https://github.com/I-TECH-UW/hie-botswana/tree/main/message-bus-kafka HAPI FHIR Store: https://github.com/I-TECH-UW/hie-botswana/blob/main/fhir-datastore-hapi-fhir/README.md Monitoring for Kafka and Docker: https://github.com/I-TECH-UW/hie-botswana/tree/main/monitoring Point of Service Applications PIMS: This is a custom-built EMR used in Botswana. Botswana EMR: This is an OpenMRS-based EMR used in Botswana, and developed by BITRI. IPMS: This is a EMR and LIS system used in major facilities in Botswana developed by Meditech. Developer Guides Botswana Laboratory Workflows Zimbabwe HIE Link to Github Repository Architecture The Zimbabwe HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Botswana HIE project. Impilo: This is a custom-built EMR used in Zimbabwe. Developer Guides Zimbabwe Patient Identity Workflows Cote d'Ivoire HIE Project Overview Dev Guide: Patient Identity Management Workflow in Cote d'Ivoire This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project. Demo Videos SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching Haiti HIE Link to Github Repository Architecture The Haiti HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Haiti HIE project. Point of Service Applications iSantePlus: This is an OpenMRS-based EMR used in Botswana, and developed by BITRI. SCC: This is an LIS system used in major facilities in Haiti developed by SCC. Developer Guides Haiti Laboratory Workflows","title":"Country Projects"},{"location":"country-guides/index.html#country-specific-project-index","text":"","title":"Country-specific Project Index"},{"location":"country-guides/index.html#overview","text":"This guide provides a starting point for learning about the Country Specific Health Information Exchange (HIE) . These projects are based on the OpenHIE Architecture and use the Instant OpenHIE V2 tooling to for packaging, deployment, and horizontal scalability. Currently, the HIE consists of core components of the HIE architecture customized to each country's context, as well as components supporting the following target workflows: - Patient Identity Management - Laboratory Order and Result Management - Data Analytics As these projects leverage a number of open standards and global goods (OpenHIE, FHIR, HIE IGs, etc.), this documentation contains a number of references to useful external resources.","title":"Overview"},{"location":"country-guides/index.html#hie-components-index","text":"","title":"HIE Components Index"},{"location":"country-guides/index.html#interoperability-layer","text":"The Interoperability Layer (IOL) is the core component of the OpenHIE architecture responsible for securely routing messages between the various other components of the HIE, and providing the entrypoint interface for external point-of-service clients. IOL OpenHIE Documentation","title":"Interoperability Layer"},{"location":"country-guides/index.html#client-registry-master-patient-index","text":"The Client Registry (CR) is responsible for linking and managing the identities of patients across the health system. Client Registry OpenHIE Documentation","title":"Client Registry (Master Patient Index)"},{"location":"country-guides/index.html#shared-health-record","text":"The Shared Health Record (SHR) service stores the longitudal health record for each patient from across the health system. This component supports workflows that require access to a shared central repository of patient data, such and laboratory order and result workflows. SHR OpenHIE Documentation","title":"Shared Health Record"},{"location":"country-guides/index.html#terminology-service","text":"The Terminology Service (TS) is responsible for managing terminology collections from across the health system and their mappings to standard terminologies. Terminology Service OpenHIE Documentation","title":"Terminology Service"},{"location":"country-guides/index.html#facility-registry-master-facility-list","text":"The Facility Registry (FR) or Master Facility List (MFL) is responsible for managing the list of facilities and their health services across the health system. Facility Registry OpenHIE Documentation","title":"Facility Registry (Master Facility List):**"},{"location":"country-guides/index.html#other-openhim-mediators","text":"The CR and SHR run as OpenHIM mediators. In addition, the following mediators are used to support the HIE workflows: FHIR Converter : This mediator is responsible for converting FHIR messages to HL7 messages and vice versa. This mediator is implemented here: https://github.com/I-TECH-UW/openhim-mediator-fhir-converter","title":"Other OpenHIM Mediators"},{"location":"country-guides/index.html#common-openhie-instant-v2-components","text":"These components are used across HIE implementations and packaged using Instant OpenHIE V2. A number were based on or inspired by the Jembi platform project: https://github.com/jembi/platform","title":"Common OpenHIE Instant V2 Components"},{"location":"country-guides/index.html#point-of-service-externally-managed-services","text":"These integrations include both point-of-service systems like EMRs and LIMs, as well as HIE components like the Facility Registry.","title":"Point of Service (Externally Managed Services)"},{"location":"country-guides/index.html#hie-components-tooling","text":"","title":"HIE Components Tooling"},{"location":"country-guides/index.html#interoperability-layer-openhim","text":"","title":"Interoperability Layer (OpenHIM)"},{"location":"country-guides/index.html#client-registry-master-patient-index-opencr","text":"","title":"Client Registry (Master Patient Index) (OpenCR)"},{"location":"country-guides/index.html#shared-health-record-shr","text":"","title":"Shared Health Record (SHR)"},{"location":"country-guides/index.html#terminology-service-open-concept-lab","text":"","title":"Terminology Service (Open Concept Lab)"},{"location":"country-guides/index.html#facility-registry-master-facility-list-gofr","text":"","title":"Facility Registry (Master Facility List):** (GoFR)"},{"location":"country-guides/index.html#botswana-hie","text":"Link to Github Repository","title":"Botswana HIE"},{"location":"country-guides/index.html#architecture","text":"The Botswana HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Botswana HIE project.","title":"Architecture"},{"location":"country-guides/index.html#additional-hie-components","text":"Omang, BDRS, and Immigration API : This mediator provides and interface for the Omang, BDRS, and Immigration databases. This mediator is implemented here (private repository): https://github.com/I-TECH-UW/OmangSVC Reverse Proxies Nginx Traefik Caddy with WAF Kafka: https://github.com/I-TECH-UW/hie-botswana/tree/main/message-bus-kafka HAPI FHIR Store: https://github.com/I-TECH-UW/hie-botswana/blob/main/fhir-datastore-hapi-fhir/README.md Monitoring for Kafka and Docker: https://github.com/I-TECH-UW/hie-botswana/tree/main/monitoring","title":"Additional HIE Components"},{"location":"country-guides/index.html#point-of-service-applications","text":"PIMS: This is a custom-built EMR used in Botswana. Botswana EMR: This is an OpenMRS-based EMR used in Botswana, and developed by BITRI. IPMS: This is a EMR and LIS system used in major facilities in Botswana developed by Meditech.","title":"Point of Service Applications"},{"location":"country-guides/index.html#developer-guides","text":"Botswana Laboratory Workflows","title":"Developer Guides"},{"location":"country-guides/index.html#zimbabwe-hie","text":"Link to Github Repository","title":"Zimbabwe HIE"},{"location":"country-guides/index.html#architecture_1","text":"The Zimbabwe HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Botswana HIE project. Impilo: This is a custom-built EMR used in Zimbabwe.","title":"Architecture"},{"location":"country-guides/index.html#developer-guides_1","text":"Zimbabwe Patient Identity Workflows","title":"Developer Guides"},{"location":"country-guides/index.html#cote-divoire-hie","text":"","title":"Cote d'Ivoire HIE"},{"location":"country-guides/index.html#project-overview","text":"","title":"Project Overview"},{"location":"country-guides/index.html#dev-guide-patient-identity-management-workflow-in-cote-divoire","text":"This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project.","title":"Dev Guide: Patient Identity Management Workflow in Cote d'Ivoire"},{"location":"country-guides/index.html#demo-videos","text":"SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching","title":"Demo Videos"},{"location":"country-guides/index.html#haiti-hie","text":"Link to Github Repository","title":"Haiti HIE"},{"location":"country-guides/index.html#architecture_2","text":"The Haiti HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Haiti HIE project.","title":"Architecture"},{"location":"country-guides/index.html#point-of-service-applications_1","text":"iSantePlus: This is an OpenMRS-based EMR used in Botswana, and developed by BITRI. SCC: This is an LIS system used in major facilities in Haiti developed by SCC.","title":"Point of Service Applications"},{"location":"country-guides/index.html#developer-guides_2","text":"Haiti Laboratory Workflows","title":"Developer Guides"},{"location":"country-guides/botswana-hie/index.html","text":"Botswana HIE Link to Github Repository Architecture The Botswana HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Botswana HIE project. Additional HIE Components Omang, BDRS, and Immigration API : This mediator provides and interface for the Omang, BDRS, and Immigration databases. This mediator is implemented here (private repository): https://github.com/I-TECH-UW/OmangSVC Reverse Proxies Nginx Traefik Caddy with WAF Kafka: https://github.com/I-TECH-UW/hie-botswana/tree/main/message-bus-kafka HAPI FHIR Store: https://github.com/I-TECH-UW/hie-botswana/blob/main/fhir-datastore-hapi-fhir/README.md Monitoring for Kafka and Docker: https://github.com/I-TECH-UW/hie-botswana/tree/main/monitoring Point of Service Applications PIMS: This is a custom-built EMR used in Botswana. Botswana EMR: This is an OpenMRS-based EMR used in Botswana, and developed by BITRI. IPMS: This is a EMR and LIS system used in major facilities in Botswana developed by Meditech. Developer Guides Botswana Laboratory Workflows","title":"Index"},{"location":"country-guides/botswana-hie/index.html#botswana-hie","text":"Link to Github Repository","title":"Botswana HIE"},{"location":"country-guides/botswana-hie/index.html#architecture","text":"The Botswana HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Botswana HIE project.","title":"Architecture"},{"location":"country-guides/botswana-hie/index.html#additional-hie-components","text":"Omang, BDRS, and Immigration API : This mediator provides and interface for the Omang, BDRS, and Immigration databases. This mediator is implemented here (private repository): https://github.com/I-TECH-UW/OmangSVC Reverse Proxies Nginx Traefik Caddy with WAF Kafka: https://github.com/I-TECH-UW/hie-botswana/tree/main/message-bus-kafka HAPI FHIR Store: https://github.com/I-TECH-UW/hie-botswana/blob/main/fhir-datastore-hapi-fhir/README.md Monitoring for Kafka and Docker: https://github.com/I-TECH-UW/hie-botswana/tree/main/monitoring","title":"Additional HIE Components"},{"location":"country-guides/botswana-hie/index.html#point-of-service-applications","text":"PIMS: This is a custom-built EMR used in Botswana. Botswana EMR: This is an OpenMRS-based EMR used in Botswana, and developed by BITRI. IPMS: This is a EMR and LIS system used in major facilities in Botswana developed by Meditech.","title":"Point of Service Applications"},{"location":"country-guides/botswana-hie/index.html#developer-guides","text":"Botswana Laboratory Workflows","title":"Developer Guides"},{"location":"country-guides/cote-d-ivoire/index.html","text":"Cote d'Ivoire HIE Project Overview Dev Guide: Patient Identity Management Workflow in Cote d'Ivoire This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project. Demo Videos SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching","title":"Index"},{"location":"country-guides/cote-d-ivoire/index.html#cote-divoire-hie","text":"","title":"Cote d'Ivoire HIE"},{"location":"country-guides/cote-d-ivoire/index.html#project-overview","text":"","title":"Project Overview"},{"location":"country-guides/cote-d-ivoire/index.html#dev-guide-patient-identity-management-workflow-in-cote-divoire","text":"This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project.","title":"Dev Guide: Patient Identity Management Workflow in Cote d'Ivoire"},{"location":"country-guides/cote-d-ivoire/index.html#demo-videos","text":"SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching","title":"Demo Videos"},{"location":"country-guides/cote-d-ivoire/cdi-project-overview.html","text":"This project was developed to","title":"Cdi project overview"},{"location":"country-guides/haiti-hie/index.html","text":"Haiti HIE Link to Github Repository Architecture The Haiti HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Haiti HIE project. Point of Service Applications iSantePlus: This is an OpenMRS-based EMR used in Botswana, and developed by BITRI. SCC: This is an LIS system used in major facilities in Haiti developed by SCC. Developer Guides Haiti Laboratory Workflows","title":"Index"},{"location":"country-guides/haiti-hie/index.html#haiti-hie","text":"Link to Github Repository","title":"Haiti HIE"},{"location":"country-guides/haiti-hie/index.html#architecture","text":"The Haiti HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Haiti HIE project.","title":"Architecture"},{"location":"country-guides/haiti-hie/index.html#point-of-service-applications","text":"iSantePlus: This is an OpenMRS-based EMR used in Botswana, and developed by BITRI. SCC: This is an LIS system used in major facilities in Haiti developed by SCC.","title":"Point of Service Applications"},{"location":"country-guides/haiti-hie/index.html#developer-guides","text":"Haiti Laboratory Workflows","title":"Developer Guides"},{"location":"country-guides/zimbabwe-hie/index.html","text":"Zimbabwe HIE Link to Github Repository Architecture The Zimbabwe HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Botswana HIE project. Impilo: This is a custom-built EMR used in Zimbabwe. Developer Guides Zimbabwe Patient Identity Workflows","title":"Index"},{"location":"country-guides/zimbabwe-hie/index.html#zimbabwe-hie","text":"Link to Github Repository","title":"Zimbabwe HIE"},{"location":"country-guides/zimbabwe-hie/index.html#architecture","text":"The Zimbabwe HIE is based on the OpenHIE architecture. The following diagram shows the core components of the HIE architecture, and highlights the components currently in scope for implementation as part of the Botswana HIE project. Impilo: This is a custom-built EMR used in Zimbabwe.","title":"Architecture"},{"location":"country-guides/zimbabwe-hie/index.html#developer-guides","text":"Zimbabwe Patient Identity Workflows","title":"Developer Guides"},{"location":"developer-guide/index.html","text":"Developer Guides Patient Identity Management Workflow Dev Guide: Patient Identity Management Workflow in Zimbabwe This guide will go over development, configuration, and debugging the laboratory workflow for Zimbabwe. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record The functionality includes Kafka-managed workflows in the SHR project, and FHIR mappings. Setup Walkthroughs OpenHIM Channel Configuration Laboratory Workflows Tutorial: Lab Order Communication between OpenMRS and OpenELIS In this tutorial, we will use the resources from this documentation - with support from the Laboratory Workflow Implementation Guide and OpenHIE Architecture Specifications - to determine create a pilot implementation of Lab Test Order and Result Communication between an Electronic Medical Record (EMR) and a Lab Information System . We will use validated open-source solutions for each component of our pilot setup, and will use the OpenHIE specifications to guide our approach, the selection and roles of different components, and the language we use for disucssing the various concepts. To get a better idea about the concepts and data elements were using, visit the Laboratory Workflows IG to a look at: 1. Our list of key concepts 2. Our logical model We will focus on the following target architecture for our setup, which you can check out in the IG : This architecture is based on the OpenHIE Specifications for Health Information Exchange components. For this tutorial, we will focus on using OpenMRS the reference implementation of an OpenHIE EMR, and OpenELIS, the reference implementation of an OpenHIE LIS. Data Model Task more info The Task resource is created along with the corresponding ServiceRequest resource when a clinician creates a TestOrder and decides to send it to OpenELIS. This resource is used to track the status of the lab order request from initiation to completion, and as a container for all other resources related to the given order. Example Task: { \"resourceType\": \"Task\", \"id\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\", \"identifier\": [ { \"system\": \"http://isanteplus.org/ext/task/identifier\", \"value\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\" } ], \"basedOn\": [ { \"reference\": \"ServiceRequest/ebf83ba0-9d3c-497f-9aa0-d839ec506202\", \"type\": \"ServiceRequest\" }, { \"reference\": \"ServiceRequest/73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"type\": \"ServiceRequest\" } ], \"status\": \"requested\", \"intent\": \"order\", \"for\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" }, \"authoredOn\": \"2020-04-28T17:33:19+00:00\", \"owner\": { \"reference\": \"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\", \"type\": \"Practitioner\" } } ServiceRequest more info The ServiceRequest resource represents the TestOrder placed in OpenMRS. It is referenced from the Task with the Task.basedOn element, and sent to OpenELIS with the Task to initiate the processing of the order. Example Service Request: { \"resourceType\": \"ServiceRequest\", \"id\": \"73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"status\": \"active\", \"intent\": \"order\", \"code\": { \"coding\": [ { \"code\": \"790AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"14682-9\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"790\" } ] }, \"subject\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" } } DiagnosticReport more info The DiagnosticReport resource is the container for the results of an Order, and holds these results in the DiagnosticReport.result element as references to Observation resources. Example Diagnostic Report { \"resourceType\": \"DiagnosticReport\", \"id\": \"93\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.163+00:00\", \"source\": \"#55t4lpDZF4q3TCZ0\" }, \"text\": { \"status\": \"generated\", \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><div class=\\\"hapiHeaderText\\\"> Untitled Diagnostic Report </div><table class=\\\"hapiPropertyTable\\\"><tbody><tr><td>Status</td><td>FINAL</td></tr></tbody></table></div>\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"result\": [ { \"reference\": \"Observation/92\", \"type\": \"Observation\" } ] } Observation more info The Observation resource contains the results of the Lab Order request. Example Observation: { \"resourceType\": \"Observation\", \"id\": \"92\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.124+00:00\", \"source\": \"#xAVz0uUE6c3l42Za\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"valueQuantity\": { \"value\": 55, \"unit\": \"UI/L\" } } Patient more info The Patient resource contains vital information for OpenELIS to fullfill the lab order request, and is referenced by the Task. Example Patient: { \"resourceType\": \"Patient\", \"id\": \"e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"identifier\": [ { \"id\": \"5981a256-d60c-44b1-beae-9bdd2cf572f8\", \"use\": \"official\", \"system\": \"iSantePlus ID\", \"value\": \"10012R\" }, { \"id\": \"75a67d54-6fff-44d1-9c3e-2116c967b475\", \"use\": \"usual\", \"system\": \"Code National\", \"value\": \"100000\" }, { \"id\": \"29447d21-3cd6-42a9-9ab2-79ebfa710a01\", \"use\": \"usual\", \"system\": \"ECID\", \"value\": \"04d759e0-5d02-11e8-b899-0242ac12000b\" } ], \"active\": true, \"name\": [ { \"id\": \"511275de-e301-44a3-95d2-28d0d3b35387\", \"family\": \"Mankowski\", \"given\": [ \"Piotr\" ] } ], \"gender\": \"male\", \"birthDate\": \"1987-01-01\", \"deceasedBoolean\": false, \"address\": [ { \"id\": \"d4f7c809-3d01-4032-b64d-4c22e8eccbbc\", \"use\": \"home\", \"country\": \"Haiti\" } ] } Useful Links Relevant FHIR Docs * Using Tasks in a RESTful Context * Workflow Module * Diagnostic Module * Example: Workflow states for a lab order for a blood test * Option G: POST of Task to fulfiller's system Relevant OpenMRS Talk Posts The handling and mapping of lab order status for the lab workflow Openmrs 3.x Setup OpenRMS 3.x on top an instance of the Reference Application click here for more infromation Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module Order Entry Ui Module Order Entry Owa Configure the required settings labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the above Modules. Note: The Lab test Concept should be of class Test ,and should be mapped to a Loinc code that matches a the Test Loinc Code in OpenELIS Go to the Reff App (2.x) Patient Dashbord Prescribed Medication Widget. see more on Creating Orders using the Order Entry Owa. If the Lab on FHIR module is rightly configured ,it will generate the lab FHIR Bundle and push to the remote Fhir Server for OpenELIS to poll the orders Start up the OpenELIS Update Task In order to be able to poll OpenELIS for available results, we need to turn on the following task in the OpenMRS scheduler: System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler Enable the patient-test-results-app for the 3.x Frontenx. Go to the Patient DashBoard in 3.x ui and click Test Results. iSant\u00e9Plus Install iSantePlus using one of these approaches . Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module IsantePlus FHIR Module Note : The above modules are installed by default by the docker setup Configure the required settings . labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the Lab On FHIR Modules. To place Lab Orders ,Fill the Laboratory Analysis Form , select OPenELIS as destination Lab and Save. Find Patient \u2192 Patient DashBord \u2192 Forms \u2192 Laboratory Analysis NB. The Patient Must have an active vist Start up the OpenELIS Update Task in order to poll for Completed Results from OpenELIS System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler To View The results ,Go to Laboratory History on the Patient DashBoard under General Actions. Find Patient \u2192 Patient DashBord \u2192 Laboratory History OpenELIS Global 2.6.x The FHIR based Lab Workflow is supported in OpenELIS 2.6 . Start an instance of OpenELIS with the following configuration properties set in the properties file. org.openelisglobal.fhirstore.uri=<localFhirServerUrl> . This is the Fhir Server that runs paralel with OPenELIS org.openelisglobal.remote.source.uri=<remoreFhirServerUr> . This is the Fhir server that the Lab on FHIR module points to ie via the labonfhir.openElisUrl org.openelisglobal.remote.source.updateStatus=true org.openelisglobal.remote.source.identifier=Practitioner/<userUuuid> .This is the UUID of the user who created the Order ie labonfhir.openElisUserUuid org.openelisglobal.task.useBasedOn=true org.openelisglobal.fhir.subscriber=h<remoreFhirServerUrl> . org.openelisglobal.fhir.subscriber.resources=Task,Patient,ServiceRequest,DiagnosticReport,Observation,Specimen,Practitioner,Encounter Ensure OpenELIS has the test that maps to the same LOINC code as the test Concept in OpenMRS. This can be added via the Admin page \u2192 Test Management \u2192 Add Tests Configure OpenELIS to accept electronic orders. Admin \u2192 Order Entry Configuration \u2192 external orders Search for the Electronic Orders ie Order \u2192 Electronic Orders and then Complete the Order Note that the user should have the right Lab Unit Priviledges to complete the Order After Results are captured and Validated , OpenELIS sends back the results to OpenMRS as a Diagnostic Report with an Observation Instant OpenHIE V2 Packaging Hie Implementations References: https://github.com/jembi/platform https://jembi.gitbook.io/openhim-platform/ https://jembi.gitbook.io/instant-v2/ Steps: 1. Add scripts for downloading Instant OpenHIE V2 CLI and add utilities. https://github.com/jembi/platform/blob/main/get-cli.sh https://github.com/jembi/platform/tree/main/utils 2. Add Dockerfile in root directory of the project that inherits from Instant OpenHIE Parent Docker Image https://github.com/jembi/platform/blob/main/Dockerfile 3. Download CLI ./get-cli.sh 4. Build and publish Docker image 4.1. Build Local Docker image 4.2. Publish Docker image 4.3. Update config.yml file 5. Add HIE components Migrating HIE Components to instant HIE V2 Description of components of instant HIE v2 config.yaml - Configuartion file for the project that has a list of the componenet packages and other project configurations Util folder - Contains scripts for bringing up and down the different components.These utilities are used in every packages swarm.sh file build-image.sh file - The file builds a local docker image that packages the instant HIE v2 project and allows it to be run using the instant CLI. NOTE: Make sure the image name and tag matches what you have in the config.yaml file. 4.get-cli.sh - It downloads the architecure specific instant CLI executable and saves it in the project root directory.This allows the CLI to be run with the ./instant command. 5.dockerfile - Packages the openHIE Components into a docker image and allows it to be run using the instant CLI.The image its self is built with the build-image.sh file .env file - Contains the settings for the various components.This file needs to be customised for each implementation. Description of components of instant openHIE V2 package 1.swarm.sh - Package specific file that controls the life cycle of the HIE components using docker swarm and the utilities from the util folder.This script contains all the intiliazation and tear down logic requried to bring the component up in the right context. 2.package-metadata.json - Contains default configuarations and settings for the package. 3.List of docker compose files - Varius services are defined with docker-compose files.Additional settings rquired to bring up these services in dev/cluster mode are separeted into there own docker-compose files.Boot up and control of these docker-compose files is defined in swarm.sh Country-specific Dev Guides Dev Guide: Botsawana Laborabory Workflows Introduction This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project. Prerequesites Before getting started, make sure you complete the following prerequisites: 1. Connect to the Botswana VPN See the relevant emails and slack messages for instructions. 2. Add the following ssh config to your ~/.ssh/config file: Host hie-pilot.gov.bw HostName 10.0.10.111 User hie 3. Connect to the HIE server using remote VS Code See slack for the password. 4. Set up the relevant VS Code projects by opening the following folders: $ cd /u01/code/shared-health-record $ code . $ cd /u01/code/openhim-mediator-fhir-converter $ code . $ cd /home/hie/hie-botswana $ code . The first two are used for development of the SHR and the FHIR Converter, respectively. The third is the main project for running the HIE. We run all the other containers EXCEPT FOR the shr and fhir-converter containers from that project. 5. Add remote debugging configurations to the SHR and FHIR Converter projects Add the following configurations to the .vscode/launch.json files in the SHR and FHIR Converter projects: You can open the file by clicking the debug icon on the left side of the VS Code window, then clicking the gear icon next to the \"Run and Debug\" dropdown, then clicking \"Open launch.json\". 5.1. SHR { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Docker: Attach to Node\", \"type\": \"node\", \"request\": \"attach\", \"restart\": true, \"port\": 9229, \"address\": \"localhost\", \"localRoot\": \"${workspaceFolder}\", \"remoteRoot\": \"/app\", \"protocol\": \"inspector\", \"sourceMaps\": true }, ] } 5.2 FHIR Converter { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Docker: Attach to Node\", \"type\": \"node\", \"request\": \"attach\", \"restart\": true, \"port\": 9230, \"address\": \"localhost\", \"localRoot\": \"${workspaceFolder}\", \"remoteRoot\": \"/app\", \"protocol\": \"inspector\", \"sourceMaps\": true }, ] } 6. Forward the following ports in VS Code for the SHR and FHIR Converter projects: SHR: 9229 FHIR Converter: 9230 Useful Docker Commands 1. Show logs of shr, shr-fhir, and fhir-converter containers docker logs -f -n 100 shr docker logs -f -n 100 shr-fhir docker logs -f -n 100 built-fhir-converter 2. Rebuild and run SHR or FHIR Converter containers cd <respective project directory> docker-compose -f debug.docker-compose.yml up --build -d 3. Rebuild and Reset the FHIR Converter templates after making changes The templates are stored in a volume, so you need to remove the volume and rebuild the container to update any changes made to the templates. cd /u01/code/openhim-mediator-fhir-converter docker-compose -f debug.docker-compose.yml down -v docker-compose -f debug.docker-compose.yml up --build -d Overview of project structure and code locations 1. SHR The SHR project contains two main that has all of the Botswana-specific workflows. One focuses on FHIR-based workflows, and the other manages the incoming HL7 messages. The FHIR-based workflows for Botswana are located in src/workflows/labWorkflowsBw.ts : https://github.com/I-TECH-UW/shared-health-record/blob/pmanko-lab-workflow-updates/src/workflows/labWorkflowsBw.ts . The HL7-based workflows are located in src/workflows/hl7WorkflowsBw.ts : https://github.com/I-TECH-UW/shared-health-record/blob/pmanko-lab-workflow-updates/src/workflows/hl7WorkflowsBw.ts The workflows are organized using Kafka topics and picked up by Kafka workers. 2. FHIR Converter The FHIR Converter project contains the mappings from FHIR to HL7 and HL7 to FHIR. The mappings are located in the data/templates directory: https://github.com/I-TECH-UW/openhim-mediator-fhir-converter/tree/pmanko-server-update/data/templates The relevant templates are ADT_A04_TO_IPMS.hbs and ORM_O01_TO_IPMS.hbs in the fhir subdirectory and ADT_A04_FROM_IPMS.hbs and ORU_R01_FROM_IPMS.hbs in the hl7 subdirectory. 2.1. HL7 to FHIR For the HL7-->FHIR templates in the data/templates/hl7 directory, there are nested handlebar template files that provide variable replacement for references to the HL7 message field names. 2.2. FHIR to HL7 For the FHIR-->HL7 templates in the data/templates/fhir directory, the variable replacement is done using custom mappings defined in the parseAdt() and parseOrm() functions in the /src/lib/fhir/fhir.js file: https://github.com/I-TECH-UW/openhim-mediator-fhir-converter/blob/e1f8085258b95735559c69d5f36eaf5ff0fd272b/src/lib/fhir/fhir.js#L107 . The correct variables need to be added to the res object, and are then available as variables in the handlebar templates. Turning on Remote Debugging for the projects: Make sure that the docker-compose entries in the debug.docker-compose.yml files for the SHR and FHIR Converter projects have debugging turned on for their respective projects. The Fhir Converter project should have the following entrypoint entry: entrypoint: /app/deploy/debug.sh The SHR project should have the following entrypoint entry: entrypoint: node --inspect=0.0.0.0:9230 /app/dist/app.js Make sure that you have the Remote Debugging setup as outlined in the Prerequisites section of this guide. Make sure that you have the relevant ports forwarded in VS Code for the SHR and FHIR Converter projects. Finally, make sure that you run yarn build on the project you want to debug, and also that you ran docker-compose -f debug.docker-compose.yml up --build -d after making any changes to the code to see them reflected in the running container. Postman Overview The Postman collection for the Botswana HIE Lab Workflows is located here: https://www.postman.com/itechuw/workspace/botswana-hie/collection/1525496-8be9c19c-9e7b-4316-adea-3604884af5d7?action=share&creator=1525496 For IPMS testing, we focus on the following folder: https://www.postman.com/itechuw/workspace/botswana-hie/folder/1525496-0c135557-d6a8-4928-a649-2546a18d075f?ctx=documentation We also use the hie-pilot.gov.bw environment. The Add Draft Order Bundle request sends a draft order that does result in concept and location mappings, but does not send an HL7 message to IPMS. It also generates new patient data as outlined in the Pre-request Script tab. The Add Requested Order Bundle request sends a requested order that does concept and location mappings, and also sends an HL7 message to IPMS. It uses the data generated by the Add Draft Order Bundle request, and can be re-run multiple times with the same patient information. OpenHIE Testing For quickly testing changes to the Fhir Converter templates, you can re-run the converter request from OpenHIE, which can be accessed here: https://hie-pilot.gov.bw/ This page loads slowly as it tries to pull external resources that are not available on the network. Dev Guide: Patient Identity Management Workflow in Cote d'Ivoire This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project. Demo Videos SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching Installation Guide: Zimbabawe HIE Introduction This section shows the quick instructions of running the ZIM HIE instantV2 setup. Requirements: Zim HIE repository ie https://github.com/mohcc/hie-zimbabwe.git Steps: 1.Clone the Zim HIE repository ie https://github.com/mohcc/hie-zimbabwe.git 2.Make sure you have an understanding of files listed under the (Migrating HIE Components to instant HIE V2) section above. 3.In the root folder of the cloned repository,run ./get-cli.sh.This downloads the architecure specific instant CLI executable and saves it in the root directory.This allows the CLI to be run with the ./instant command. 4.The above command creates three folders and you need only one basing on your operating system.We will concetrate on the instant-linux folder which you can rename to instant 5.Test that you can now run the CLI with the instant command by running ./instant,this should return a list of the avialable commands 6.You can now start launching the packages,start by launching the reverse proxy since its depended on by many other packages ie run ./instant package init -n reverse-proxy-nginx --env-file .env 7.You can now run any package that you want to start ie run ./instant package init -n addpackagenamehere --env-file .env","title":"Developer Guides"},{"location":"developer-guide/index.html#developer-guides","text":"","title":"Developer Guides"},{"location":"developer-guide/index.html#patient-identity-management-workflow","text":"","title":"Patient Identity Management Workflow"},{"location":"developer-guide/index.html#dev-guide-patient-identity-management-workflow-in-zimbabwe","text":"This guide will go over development, configuration, and debugging the laboratory workflow for Zimbabwe. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record The functionality includes Kafka-managed workflows in the SHR project, and FHIR mappings.","title":"Dev Guide: Patient Identity Management Workflow in Zimbabwe"},{"location":"developer-guide/index.html#setup-walkthroughs","text":"OpenHIM Channel Configuration","title":"Setup Walkthroughs"},{"location":"developer-guide/index.html#laboratory-workflows","text":"","title":"Laboratory Workflows"},{"location":"developer-guide/index.html#tutorial-lab-order-communication-between-openmrs-and-openelis","text":"In this tutorial, we will use the resources from this documentation - with support from the Laboratory Workflow Implementation Guide and OpenHIE Architecture Specifications - to determine create a pilot implementation of Lab Test Order and Result Communication between an Electronic Medical Record (EMR) and a Lab Information System . We will use validated open-source solutions for each component of our pilot setup, and will use the OpenHIE specifications to guide our approach, the selection and roles of different components, and the language we use for disucssing the various concepts. To get a better idea about the concepts and data elements were using, visit the Laboratory Workflows IG to a look at: 1. Our list of key concepts 2. Our logical model We will focus on the following target architecture for our setup, which you can check out in the IG : This architecture is based on the OpenHIE Specifications for Health Information Exchange components. For this tutorial, we will focus on using OpenMRS the reference implementation of an OpenHIE EMR, and OpenELIS, the reference implementation of an OpenHIE LIS.","title":"Tutorial: Lab Order Communication between OpenMRS and OpenELIS"},{"location":"developer-guide/index.html#data-model","text":"","title":"Data Model"},{"location":"developer-guide/index.html#task","text":"more info The Task resource is created along with the corresponding ServiceRequest resource when a clinician creates a TestOrder and decides to send it to OpenELIS. This resource is used to track the status of the lab order request from initiation to completion, and as a container for all other resources related to the given order. Example Task: { \"resourceType\": \"Task\", \"id\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\", \"identifier\": [ { \"system\": \"http://isanteplus.org/ext/task/identifier\", \"value\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\" } ], \"basedOn\": [ { \"reference\": \"ServiceRequest/ebf83ba0-9d3c-497f-9aa0-d839ec506202\", \"type\": \"ServiceRequest\" }, { \"reference\": \"ServiceRequest/73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"type\": \"ServiceRequest\" } ], \"status\": \"requested\", \"intent\": \"order\", \"for\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" }, \"authoredOn\": \"2020-04-28T17:33:19+00:00\", \"owner\": { \"reference\": \"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\", \"type\": \"Practitioner\" } }","title":"Task"},{"location":"developer-guide/index.html#servicerequest","text":"more info The ServiceRequest resource represents the TestOrder placed in OpenMRS. It is referenced from the Task with the Task.basedOn element, and sent to OpenELIS with the Task to initiate the processing of the order. Example Service Request: { \"resourceType\": \"ServiceRequest\", \"id\": \"73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"status\": \"active\", \"intent\": \"order\", \"code\": { \"coding\": [ { \"code\": \"790AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"14682-9\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"790\" } ] }, \"subject\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" } }","title":"ServiceRequest"},{"location":"developer-guide/index.html#diagnosticreport","text":"more info The DiagnosticReport resource is the container for the results of an Order, and holds these results in the DiagnosticReport.result element as references to Observation resources. Example Diagnostic Report { \"resourceType\": \"DiagnosticReport\", \"id\": \"93\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.163+00:00\", \"source\": \"#55t4lpDZF4q3TCZ0\" }, \"text\": { \"status\": \"generated\", \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><div class=\\\"hapiHeaderText\\\"> Untitled Diagnostic Report </div><table class=\\\"hapiPropertyTable\\\"><tbody><tr><td>Status</td><td>FINAL</td></tr></tbody></table></div>\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"result\": [ { \"reference\": \"Observation/92\", \"type\": \"Observation\" } ] }","title":"DiagnosticReport"},{"location":"developer-guide/index.html#observation","text":"more info The Observation resource contains the results of the Lab Order request. Example Observation: { \"resourceType\": \"Observation\", \"id\": \"92\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.124+00:00\", \"source\": \"#xAVz0uUE6c3l42Za\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"valueQuantity\": { \"value\": 55, \"unit\": \"UI/L\" } }","title":"Observation"},{"location":"developer-guide/index.html#patient","text":"more info The Patient resource contains vital information for OpenELIS to fullfill the lab order request, and is referenced by the Task. Example Patient: { \"resourceType\": \"Patient\", \"id\": \"e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"identifier\": [ { \"id\": \"5981a256-d60c-44b1-beae-9bdd2cf572f8\", \"use\": \"official\", \"system\": \"iSantePlus ID\", \"value\": \"10012R\" }, { \"id\": \"75a67d54-6fff-44d1-9c3e-2116c967b475\", \"use\": \"usual\", \"system\": \"Code National\", \"value\": \"100000\" }, { \"id\": \"29447d21-3cd6-42a9-9ab2-79ebfa710a01\", \"use\": \"usual\", \"system\": \"ECID\", \"value\": \"04d759e0-5d02-11e8-b899-0242ac12000b\" } ], \"active\": true, \"name\": [ { \"id\": \"511275de-e301-44a3-95d2-28d0d3b35387\", \"family\": \"Mankowski\", \"given\": [ \"Piotr\" ] } ], \"gender\": \"male\", \"birthDate\": \"1987-01-01\", \"deceasedBoolean\": false, \"address\": [ { \"id\": \"d4f7c809-3d01-4032-b64d-4c22e8eccbbc\", \"use\": \"home\", \"country\": \"Haiti\" } ] }","title":"Patient"},{"location":"developer-guide/index.html#useful-links","text":"Relevant FHIR Docs * Using Tasks in a RESTful Context * Workflow Module * Diagnostic Module * Example: Workflow states for a lab order for a blood test * Option G: POST of Task to fulfiller's system Relevant OpenMRS Talk Posts The handling and mapping of lab order status for the lab workflow","title":"Useful Links"},{"location":"developer-guide/index.html#openmrs-3x","text":"Setup OpenRMS 3.x on top an instance of the Reference Application click here for more infromation Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module Order Entry Ui Module Order Entry Owa Configure the required settings labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the above Modules. Note: The Lab test Concept should be of class Test ,and should be mapped to a Loinc code that matches a the Test Loinc Code in OpenELIS Go to the Reff App (2.x) Patient Dashbord Prescribed Medication Widget. see more on Creating Orders using the Order Entry Owa. If the Lab on FHIR module is rightly configured ,it will generate the lab FHIR Bundle and push to the remote Fhir Server for OpenELIS to poll the orders Start up the OpenELIS Update Task In order to be able to poll OpenELIS for available results, we need to turn on the following task in the OpenMRS scheduler: System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler Enable the patient-test-results-app for the 3.x Frontenx. Go to the Patient DashBoard in 3.x ui and click Test Results.","title":"Openmrs 3.x"},{"location":"developer-guide/index.html#isanteplus","text":"Install iSantePlus using one of these approaches . Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module IsantePlus FHIR Module Note : The above modules are installed by default by the docker setup Configure the required settings . labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the Lab On FHIR Modules. To place Lab Orders ,Fill the Laboratory Analysis Form , select OPenELIS as destination Lab and Save. Find Patient \u2192 Patient DashBord \u2192 Forms \u2192 Laboratory Analysis NB. The Patient Must have an active vist Start up the OpenELIS Update Task in order to poll for Completed Results from OpenELIS System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler To View The results ,Go to Laboratory History on the Patient DashBoard under General Actions. Find Patient \u2192 Patient DashBord \u2192 Laboratory History","title":"iSant\u00e9Plus"},{"location":"developer-guide/index.html#openelis-global-26x","text":"The FHIR based Lab Workflow is supported in OpenELIS 2.6 . Start an instance of OpenELIS with the following configuration properties set in the properties file. org.openelisglobal.fhirstore.uri=<localFhirServerUrl> . This is the Fhir Server that runs paralel with OPenELIS org.openelisglobal.remote.source.uri=<remoreFhirServerUr> . This is the Fhir server that the Lab on FHIR module points to ie via the labonfhir.openElisUrl org.openelisglobal.remote.source.updateStatus=true org.openelisglobal.remote.source.identifier=Practitioner/<userUuuid> .This is the UUID of the user who created the Order ie labonfhir.openElisUserUuid org.openelisglobal.task.useBasedOn=true org.openelisglobal.fhir.subscriber=h<remoreFhirServerUrl> . org.openelisglobal.fhir.subscriber.resources=Task,Patient,ServiceRequest,DiagnosticReport,Observation,Specimen,Practitioner,Encounter Ensure OpenELIS has the test that maps to the same LOINC code as the test Concept in OpenMRS. This can be added via the Admin page \u2192 Test Management \u2192 Add Tests Configure OpenELIS to accept electronic orders. Admin \u2192 Order Entry Configuration \u2192 external orders Search for the Electronic Orders ie Order \u2192 Electronic Orders and then Complete the Order Note that the user should have the right Lab Unit Priviledges to complete the Order After Results are captured and Validated , OpenELIS sends back the results to OpenMRS as a Diagnostic Report with an Observation","title":"OpenELIS Global 2.6.x"},{"location":"developer-guide/index.html#instant-openhie-v2","text":"","title":"Instant OpenHIE V2"},{"location":"developer-guide/index.html#packaging-hie-implementations","text":"","title":"Packaging Hie Implementations"},{"location":"developer-guide/index.html#references","text":"https://github.com/jembi/platform https://jembi.gitbook.io/openhim-platform/ https://jembi.gitbook.io/instant-v2/","title":"References:"},{"location":"developer-guide/index.html#steps","text":"","title":"Steps:"},{"location":"developer-guide/index.html#1-add-scripts-for-downloading-instant-openhie-v2-cli-and-add-utilities","text":"https://github.com/jembi/platform/blob/main/get-cli.sh https://github.com/jembi/platform/tree/main/utils","title":"1. Add scripts for downloading Instant OpenHIE V2 CLI and add utilities."},{"location":"developer-guide/index.html#2-add-dockerfile-in-root-directory-of-the-project-that-inherits-from-instant-openhie-parent-docker-image","text":"https://github.com/jembi/platform/blob/main/Dockerfile","title":"2. Add Dockerfile in root directory of the project that inherits from Instant OpenHIE Parent Docker Image"},{"location":"developer-guide/index.html#3-download-cli","text":"./get-cli.sh","title":"3. Download CLI"},{"location":"developer-guide/index.html#4-build-and-publish-docker-image","text":"","title":"4. Build and publish Docker image"},{"location":"developer-guide/index.html#41-build-local-docker-image","text":"","title":"4.1. Build Local Docker image"},{"location":"developer-guide/index.html#42-publish-docker-image","text":"","title":"4.2. Publish Docker image"},{"location":"developer-guide/index.html#43-update-configyml-file","text":"","title":"4.3. Update config.yml file"},{"location":"developer-guide/index.html#5-add-hie-components","text":"","title":"5. Add HIE components"},{"location":"developer-guide/index.html#migrating-hie-components-to-instant-hie-v2","text":"","title":"Migrating HIE Components to instant HIE V2"},{"location":"developer-guide/index.html#description-of-components-of-instant-hie-v2","text":"config.yaml - Configuartion file for the project that has a list of the componenet packages and other project configurations Util folder - Contains scripts for bringing up and down the different components.These utilities are used in every packages swarm.sh file build-image.sh file - The file builds a local docker image that packages the instant HIE v2 project and allows it to be run using the instant CLI. NOTE: Make sure the image name and tag matches what you have in the config.yaml file. 4.get-cli.sh - It downloads the architecure specific instant CLI executable and saves it in the project root directory.This allows the CLI to be run with the ./instant command. 5.dockerfile - Packages the openHIE Components into a docker image and allows it to be run using the instant CLI.The image its self is built with the build-image.sh file .env file - Contains the settings for the various components.This file needs to be customised for each implementation.","title":"Description of components of instant HIE v2"},{"location":"developer-guide/index.html#description-of-components-of-instant-openhie-v2-package","text":"1.swarm.sh - Package specific file that controls the life cycle of the HIE components using docker swarm and the utilities from the util folder.This script contains all the intiliazation and tear down logic requried to bring the component up in the right context. 2.package-metadata.json - Contains default configuarations and settings for the package. 3.List of docker compose files - Varius services are defined with docker-compose files.Additional settings rquired to bring up these services in dev/cluster mode are separeted into there own docker-compose files.Boot up and control of these docker-compose files is defined in swarm.sh","title":"Description of components of instant openHIE V2 package"},{"location":"developer-guide/index.html#country-specific-dev-guides","text":"","title":"Country-specific Dev Guides"},{"location":"developer-guide/index.html#dev-guide-botsawana-laborabory-workflows","text":"","title":"Dev Guide: Botsawana Laborabory Workflows"},{"location":"developer-guide/index.html#introduction","text":"This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project.","title":"Introduction"},{"location":"developer-guide/index.html#prerequesites","text":"Before getting started, make sure you complete the following prerequisites:","title":"Prerequesites"},{"location":"developer-guide/index.html#1-connect-to-the-botswana-vpn","text":"See the relevant emails and slack messages for instructions.","title":"1. Connect to the Botswana VPN"},{"location":"developer-guide/index.html#2-add-the-following-ssh-config-to-your-sshconfig-file","text":"Host hie-pilot.gov.bw HostName 10.0.10.111 User hie","title":"2. Add the following ssh config to your ~/.ssh/config file:"},{"location":"developer-guide/index.html#3-connect-to-the-hie-server-using-remote-vs-code","text":"See slack for the password.","title":"3. Connect to the HIE server using remote VS Code"},{"location":"developer-guide/index.html#4-set-up-the-relevant-vs-code-projects-by-opening-the-following-folders","text":"$ cd /u01/code/shared-health-record $ code . $ cd /u01/code/openhim-mediator-fhir-converter $ code . $ cd /home/hie/hie-botswana $ code . The first two are used for development of the SHR and the FHIR Converter, respectively. The third is the main project for running the HIE. We run all the other containers EXCEPT FOR the shr and fhir-converter containers from that project.","title":"4. Set up the relevant VS Code projects by opening the following folders:"},{"location":"developer-guide/index.html#5-add-remote-debugging-configurations-to-the-shr-and-fhir-converter-projects","text":"Add the following configurations to the .vscode/launch.json files in the SHR and FHIR Converter projects: You can open the file by clicking the debug icon on the left side of the VS Code window, then clicking the gear icon next to the \"Run and Debug\" dropdown, then clicking \"Open launch.json\".","title":"5. Add remote debugging configurations to the SHR and FHIR Converter projects"},{"location":"developer-guide/index.html#51-shr","text":"{ \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Docker: Attach to Node\", \"type\": \"node\", \"request\": \"attach\", \"restart\": true, \"port\": 9229, \"address\": \"localhost\", \"localRoot\": \"${workspaceFolder}\", \"remoteRoot\": \"/app\", \"protocol\": \"inspector\", \"sourceMaps\": true }, ] }","title":"5.1. SHR"},{"location":"developer-guide/index.html#52-fhir-converter","text":"{ \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Docker: Attach to Node\", \"type\": \"node\", \"request\": \"attach\", \"restart\": true, \"port\": 9230, \"address\": \"localhost\", \"localRoot\": \"${workspaceFolder}\", \"remoteRoot\": \"/app\", \"protocol\": \"inspector\", \"sourceMaps\": true }, ] }","title":"5.2 FHIR Converter"},{"location":"developer-guide/index.html#6-forward-the-following-ports-in-vs-code-for-the-shr-and-fhir-converter-projects","text":"SHR: 9229 FHIR Converter: 9230","title":"6. Forward the following ports in VS Code for the SHR and FHIR Converter projects:"},{"location":"developer-guide/index.html#useful-docker-commands","text":"","title":"Useful Docker Commands"},{"location":"developer-guide/index.html#1-show-logs-of-shr-shr-fhir-and-fhir-converter-containers","text":"docker logs -f -n 100 shr docker logs -f -n 100 shr-fhir docker logs -f -n 100 built-fhir-converter","title":"1. Show logs of shr, shr-fhir, and fhir-converter containers"},{"location":"developer-guide/index.html#2-rebuild-and-run-shr-or-fhir-converter-containers","text":"cd <respective project directory> docker-compose -f debug.docker-compose.yml up --build -d","title":"2. Rebuild and run SHR or FHIR Converter containers"},{"location":"developer-guide/index.html#3-rebuild-and-reset-the-fhir-converter-templates-after-making-changes","text":"The templates are stored in a volume, so you need to remove the volume and rebuild the container to update any changes made to the templates. cd /u01/code/openhim-mediator-fhir-converter docker-compose -f debug.docker-compose.yml down -v docker-compose -f debug.docker-compose.yml up --build -d","title":"3. Rebuild and Reset the FHIR Converter templates after making changes"},{"location":"developer-guide/index.html#overview-of-project-structure-and-code-locations","text":"","title":"Overview of project structure and code locations"},{"location":"developer-guide/index.html#1-shr","text":"The SHR project contains two main that has all of the Botswana-specific workflows. One focuses on FHIR-based workflows, and the other manages the incoming HL7 messages. The FHIR-based workflows for Botswana are located in src/workflows/labWorkflowsBw.ts : https://github.com/I-TECH-UW/shared-health-record/blob/pmanko-lab-workflow-updates/src/workflows/labWorkflowsBw.ts . The HL7-based workflows are located in src/workflows/hl7WorkflowsBw.ts : https://github.com/I-TECH-UW/shared-health-record/blob/pmanko-lab-workflow-updates/src/workflows/hl7WorkflowsBw.ts The workflows are organized using Kafka topics and picked up by Kafka workers.","title":"1. SHR"},{"location":"developer-guide/index.html#2-fhir-converter","text":"The FHIR Converter project contains the mappings from FHIR to HL7 and HL7 to FHIR. The mappings are located in the data/templates directory: https://github.com/I-TECH-UW/openhim-mediator-fhir-converter/tree/pmanko-server-update/data/templates The relevant templates are ADT_A04_TO_IPMS.hbs and ORM_O01_TO_IPMS.hbs in the fhir subdirectory and ADT_A04_FROM_IPMS.hbs and ORU_R01_FROM_IPMS.hbs in the hl7 subdirectory.","title":"2. FHIR Converter"},{"location":"developer-guide/index.html#21-hl7-to-fhir","text":"For the HL7-->FHIR templates in the data/templates/hl7 directory, there are nested handlebar template files that provide variable replacement for references to the HL7 message field names.","title":"2.1. HL7 to FHIR"},{"location":"developer-guide/index.html#22-fhir-to-hl7","text":"For the FHIR-->HL7 templates in the data/templates/fhir directory, the variable replacement is done using custom mappings defined in the parseAdt() and parseOrm() functions in the /src/lib/fhir/fhir.js file: https://github.com/I-TECH-UW/openhim-mediator-fhir-converter/blob/e1f8085258b95735559c69d5f36eaf5ff0fd272b/src/lib/fhir/fhir.js#L107 . The correct variables need to be added to the res object, and are then available as variables in the handlebar templates.","title":"2.2. FHIR to HL7"},{"location":"developer-guide/index.html#turning-on-remote-debugging-for-the-projects","text":"Make sure that the docker-compose entries in the debug.docker-compose.yml files for the SHR and FHIR Converter projects have debugging turned on for their respective projects. The Fhir Converter project should have the following entrypoint entry: entrypoint: /app/deploy/debug.sh The SHR project should have the following entrypoint entry: entrypoint: node --inspect=0.0.0.0:9230 /app/dist/app.js Make sure that you have the Remote Debugging setup as outlined in the Prerequisites section of this guide. Make sure that you have the relevant ports forwarded in VS Code for the SHR and FHIR Converter projects. Finally, make sure that you run yarn build on the project you want to debug, and also that you ran docker-compose -f debug.docker-compose.yml up --build -d after making any changes to the code to see them reflected in the running container.","title":"Turning on Remote Debugging for the projects:"},{"location":"developer-guide/index.html#postman-overview","text":"The Postman collection for the Botswana HIE Lab Workflows is located here: https://www.postman.com/itechuw/workspace/botswana-hie/collection/1525496-8be9c19c-9e7b-4316-adea-3604884af5d7?action=share&creator=1525496 For IPMS testing, we focus on the following folder: https://www.postman.com/itechuw/workspace/botswana-hie/folder/1525496-0c135557-d6a8-4928-a649-2546a18d075f?ctx=documentation We also use the hie-pilot.gov.bw environment. The Add Draft Order Bundle request sends a draft order that does result in concept and location mappings, but does not send an HL7 message to IPMS. It also generates new patient data as outlined in the Pre-request Script tab. The Add Requested Order Bundle request sends a requested order that does concept and location mappings, and also sends an HL7 message to IPMS. It uses the data generated by the Add Draft Order Bundle request, and can be re-run multiple times with the same patient information.","title":"Postman Overview"},{"location":"developer-guide/index.html#openhie-testing","text":"For quickly testing changes to the Fhir Converter templates, you can re-run the converter request from OpenHIE, which can be accessed here: https://hie-pilot.gov.bw/ This page loads slowly as it tries to pull external resources that are not available on the network.","title":"OpenHIE Testing"},{"location":"developer-guide/index.html#dev-guide-patient-identity-management-workflow-in-cote-divoire","text":"This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project.","title":"Dev Guide: Patient Identity Management Workflow in Cote d'Ivoire"},{"location":"developer-guide/index.html#demo-videos","text":"SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching","title":"Demo Videos"},{"location":"developer-guide/index.html#installation-guide-zimbabawe-hie","text":"","title":"Installation Guide: Zimbabawe HIE"},{"location":"developer-guide/index.html#introduction_1","text":"This section shows the quick instructions of running the ZIM HIE instantV2 setup.","title":"Introduction"},{"location":"developer-guide/index.html#requirements","text":"Zim HIE repository ie https://github.com/mohcc/hie-zimbabwe.git","title":"Requirements:"},{"location":"developer-guide/index.html#steps_1","text":"1.Clone the Zim HIE repository ie https://github.com/mohcc/hie-zimbabwe.git 2.Make sure you have an understanding of files listed under the (Migrating HIE Components to instant HIE V2) section above. 3.In the root folder of the cloned repository,run ./get-cli.sh.This downloads the architecure specific instant CLI executable and saves it in the root directory.This allows the CLI to be run with the ./instant command. 4.The above command creates three folders and you need only one basing on your operating system.We will concetrate on the instant-linux folder which you can rename to instant 5.Test that you can now run the CLI with the instant command by running ./instant,this should return a list of the avialable commands 6.You can now start launching the packages,start by launching the reverse proxy since its depended on by many other packages ie run ./instant package init -n reverse-proxy-nginx --env-file .env 7.You can now run any package that you want to start ie run ./instant package init -n addpackagenamehere --env-file .env","title":"Steps:"},{"location":"developer-guide/botswana/botswana-lab-workflows.html","text":"Dev Guide: Botsawana Laborabory Workflows Introduction This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project. Prerequesites Before getting started, make sure you complete the following prerequisites: 1. Connect to the Botswana VPN See the relevant emails and slack messages for instructions. 2. Add the following ssh config to your ~/.ssh/config file: Host hie-pilot.gov.bw HostName 10.0.10.111 User hie 3. Connect to the HIE server using remote VS Code See slack for the password. 4. Set up the relevant VS Code projects by opening the following folders: $ cd /u01/code/shared-health-record $ code . $ cd /u01/code/openhim-mediator-fhir-converter $ code . $ cd /home/hie/hie-botswana $ code . The first two are used for development of the SHR and the FHIR Converter, respectively. The third is the main project for running the HIE. We run all the other containers EXCEPT FOR the shr and fhir-converter containers from that project. 5. Add remote debugging configurations to the SHR and FHIR Converter projects Add the following configurations to the .vscode/launch.json files in the SHR and FHIR Converter projects: You can open the file by clicking the debug icon on the left side of the VS Code window, then clicking the gear icon next to the \"Run and Debug\" dropdown, then clicking \"Open launch.json\". 5.1. SHR { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Docker: Attach to Node\", \"type\": \"node\", \"request\": \"attach\", \"restart\": true, \"port\": 9229, \"address\": \"localhost\", \"localRoot\": \"${workspaceFolder}\", \"remoteRoot\": \"/app\", \"protocol\": \"inspector\", \"sourceMaps\": true }, ] } 5.2 FHIR Converter { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Docker: Attach to Node\", \"type\": \"node\", \"request\": \"attach\", \"restart\": true, \"port\": 9230, \"address\": \"localhost\", \"localRoot\": \"${workspaceFolder}\", \"remoteRoot\": \"/app\", \"protocol\": \"inspector\", \"sourceMaps\": true }, ] } 6. Forward the following ports in VS Code for the SHR and FHIR Converter projects: SHR: 9229 FHIR Converter: 9230 Useful Docker Commands 1. Show logs of shr, shr-fhir, and fhir-converter containers docker logs -f -n 100 shr docker logs -f -n 100 shr-fhir docker logs -f -n 100 built-fhir-converter 2. Rebuild and run SHR or FHIR Converter containers cd <respective project directory> docker-compose -f debug.docker-compose.yml up --build -d 3. Rebuild and Reset the FHIR Converter templates after making changes The templates are stored in a volume, so you need to remove the volume and rebuild the container to update any changes made to the templates. cd /u01/code/openhim-mediator-fhir-converter docker-compose -f debug.docker-compose.yml down -v docker-compose -f debug.docker-compose.yml up --build -d Overview of project structure and code locations 1. SHR The SHR project contains two main that has all of the Botswana-specific workflows. One focuses on FHIR-based workflows, and the other manages the incoming HL7 messages. The FHIR-based workflows for Botswana are located in src/workflows/labWorkflowsBw.ts : https://github.com/I-TECH-UW/shared-health-record/blob/pmanko-lab-workflow-updates/src/workflows/labWorkflowsBw.ts . The HL7-based workflows are located in src/workflows/hl7WorkflowsBw.ts : https://github.com/I-TECH-UW/shared-health-record/blob/pmanko-lab-workflow-updates/src/workflows/hl7WorkflowsBw.ts The workflows are organized using Kafka topics and picked up by Kafka workers. 2. FHIR Converter The FHIR Converter project contains the mappings from FHIR to HL7 and HL7 to FHIR. The mappings are located in the data/templates directory: https://github.com/I-TECH-UW/openhim-mediator-fhir-converter/tree/pmanko-server-update/data/templates The relevant templates are ADT_A04_TO_IPMS.hbs and ORM_O01_TO_IPMS.hbs in the fhir subdirectory and ADT_A04_FROM_IPMS.hbs and ORU_R01_FROM_IPMS.hbs in the hl7 subdirectory. 2.1. HL7 to FHIR For the HL7-->FHIR templates in the data/templates/hl7 directory, there are nested handlebar template files that provide variable replacement for references to the HL7 message field names. 2.2. FHIR to HL7 For the FHIR-->HL7 templates in the data/templates/fhir directory, the variable replacement is done using custom mappings defined in the parseAdt() and parseOrm() functions in the /src/lib/fhir/fhir.js file: https://github.com/I-TECH-UW/openhim-mediator-fhir-converter/blob/e1f8085258b95735559c69d5f36eaf5ff0fd272b/src/lib/fhir/fhir.js#L107 . The correct variables need to be added to the res object, and are then available as variables in the handlebar templates. Turning on Remote Debugging for the projects: Make sure that the docker-compose entries in the debug.docker-compose.yml files for the SHR and FHIR Converter projects have debugging turned on for their respective projects. The Fhir Converter project should have the following entrypoint entry: entrypoint: /app/deploy/debug.sh The SHR project should have the following entrypoint entry: entrypoint: node --inspect=0.0.0.0:9230 /app/dist/app.js Make sure that you have the Remote Debugging setup as outlined in the Prerequisites section of this guide. Make sure that you have the relevant ports forwarded in VS Code for the SHR and FHIR Converter projects. Finally, make sure that you run yarn build on the project you want to debug, and also that you ran docker-compose -f debug.docker-compose.yml up --build -d after making any changes to the code to see them reflected in the running container. Postman Overview The Postman collection for the Botswana HIE Lab Workflows is located here: https://www.postman.com/itechuw/workspace/botswana-hie/collection/1525496-8be9c19c-9e7b-4316-adea-3604884af5d7?action=share&creator=1525496 For IPMS testing, we focus on the following folder: https://www.postman.com/itechuw/workspace/botswana-hie/folder/1525496-0c135557-d6a8-4928-a649-2546a18d075f?ctx=documentation We also use the hie-pilot.gov.bw environment. The Add Draft Order Bundle request sends a draft order that does result in concept and location mappings, but does not send an HL7 message to IPMS. It also generates new patient data as outlined in the Pre-request Script tab. The Add Requested Order Bundle request sends a requested order that does concept and location mappings, and also sends an HL7 message to IPMS. It uses the data generated by the Add Draft Order Bundle request, and can be re-run multiple times with the same patient information. OpenHIE Testing For quickly testing changes to the Fhir Converter templates, you can re-run the converter request from OpenHIE, which can be accessed here: https://hie-pilot.gov.bw/ This page loads slowly as it tries to pull external resources that are not available on the network.","title":"Botswana lab workflows"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#dev-guide-botsawana-laborabory-workflows","text":"","title":"Dev Guide: Botsawana Laborabory Workflows"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#introduction","text":"This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project.","title":"Introduction"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#prerequesites","text":"Before getting started, make sure you complete the following prerequisites:","title":"Prerequesites"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#1-connect-to-the-botswana-vpn","text":"See the relevant emails and slack messages for instructions.","title":"1. Connect to the Botswana VPN"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#2-add-the-following-ssh-config-to-your-sshconfig-file","text":"Host hie-pilot.gov.bw HostName 10.0.10.111 User hie","title":"2. Add the following ssh config to your ~/.ssh/config file:"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#3-connect-to-the-hie-server-using-remote-vs-code","text":"See slack for the password.","title":"3. Connect to the HIE server using remote VS Code"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#4-set-up-the-relevant-vs-code-projects-by-opening-the-following-folders","text":"$ cd /u01/code/shared-health-record $ code . $ cd /u01/code/openhim-mediator-fhir-converter $ code . $ cd /home/hie/hie-botswana $ code . The first two are used for development of the SHR and the FHIR Converter, respectively. The third is the main project for running the HIE. We run all the other containers EXCEPT FOR the shr and fhir-converter containers from that project.","title":"4. Set up the relevant VS Code projects by opening the following folders:"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#5-add-remote-debugging-configurations-to-the-shr-and-fhir-converter-projects","text":"Add the following configurations to the .vscode/launch.json files in the SHR and FHIR Converter projects: You can open the file by clicking the debug icon on the left side of the VS Code window, then clicking the gear icon next to the \"Run and Debug\" dropdown, then clicking \"Open launch.json\".","title":"5. Add remote debugging configurations to the SHR and FHIR Converter projects"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#51-shr","text":"{ \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Docker: Attach to Node\", \"type\": \"node\", \"request\": \"attach\", \"restart\": true, \"port\": 9229, \"address\": \"localhost\", \"localRoot\": \"${workspaceFolder}\", \"remoteRoot\": \"/app\", \"protocol\": \"inspector\", \"sourceMaps\": true }, ] }","title":"5.1. SHR"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#52-fhir-converter","text":"{ \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Docker: Attach to Node\", \"type\": \"node\", \"request\": \"attach\", \"restart\": true, \"port\": 9230, \"address\": \"localhost\", \"localRoot\": \"${workspaceFolder}\", \"remoteRoot\": \"/app\", \"protocol\": \"inspector\", \"sourceMaps\": true }, ] }","title":"5.2 FHIR Converter"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#6-forward-the-following-ports-in-vs-code-for-the-shr-and-fhir-converter-projects","text":"SHR: 9229 FHIR Converter: 9230","title":"6. Forward the following ports in VS Code for the SHR and FHIR Converter projects:"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#useful-docker-commands","text":"","title":"Useful Docker Commands"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#1-show-logs-of-shr-shr-fhir-and-fhir-converter-containers","text":"docker logs -f -n 100 shr docker logs -f -n 100 shr-fhir docker logs -f -n 100 built-fhir-converter","title":"1. Show logs of shr, shr-fhir, and fhir-converter containers"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#2-rebuild-and-run-shr-or-fhir-converter-containers","text":"cd <respective project directory> docker-compose -f debug.docker-compose.yml up --build -d","title":"2. Rebuild and run SHR or FHIR Converter containers"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#3-rebuild-and-reset-the-fhir-converter-templates-after-making-changes","text":"The templates are stored in a volume, so you need to remove the volume and rebuild the container to update any changes made to the templates. cd /u01/code/openhim-mediator-fhir-converter docker-compose -f debug.docker-compose.yml down -v docker-compose -f debug.docker-compose.yml up --build -d","title":"3. Rebuild and Reset the FHIR Converter templates after making changes"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#overview-of-project-structure-and-code-locations","text":"","title":"Overview of project structure and code locations"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#1-shr","text":"The SHR project contains two main that has all of the Botswana-specific workflows. One focuses on FHIR-based workflows, and the other manages the incoming HL7 messages. The FHIR-based workflows for Botswana are located in src/workflows/labWorkflowsBw.ts : https://github.com/I-TECH-UW/shared-health-record/blob/pmanko-lab-workflow-updates/src/workflows/labWorkflowsBw.ts . The HL7-based workflows are located in src/workflows/hl7WorkflowsBw.ts : https://github.com/I-TECH-UW/shared-health-record/blob/pmanko-lab-workflow-updates/src/workflows/hl7WorkflowsBw.ts The workflows are organized using Kafka topics and picked up by Kafka workers.","title":"1. SHR"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#2-fhir-converter","text":"The FHIR Converter project contains the mappings from FHIR to HL7 and HL7 to FHIR. The mappings are located in the data/templates directory: https://github.com/I-TECH-UW/openhim-mediator-fhir-converter/tree/pmanko-server-update/data/templates The relevant templates are ADT_A04_TO_IPMS.hbs and ORM_O01_TO_IPMS.hbs in the fhir subdirectory and ADT_A04_FROM_IPMS.hbs and ORU_R01_FROM_IPMS.hbs in the hl7 subdirectory.","title":"2. FHIR Converter"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#21-hl7-to-fhir","text":"For the HL7-->FHIR templates in the data/templates/hl7 directory, there are nested handlebar template files that provide variable replacement for references to the HL7 message field names.","title":"2.1. HL7 to FHIR"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#22-fhir-to-hl7","text":"For the FHIR-->HL7 templates in the data/templates/fhir directory, the variable replacement is done using custom mappings defined in the parseAdt() and parseOrm() functions in the /src/lib/fhir/fhir.js file: https://github.com/I-TECH-UW/openhim-mediator-fhir-converter/blob/e1f8085258b95735559c69d5f36eaf5ff0fd272b/src/lib/fhir/fhir.js#L107 . The correct variables need to be added to the res object, and are then available as variables in the handlebar templates.","title":"2.2. FHIR to HL7"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#turning-on-remote-debugging-for-the-projects","text":"Make sure that the docker-compose entries in the debug.docker-compose.yml files for the SHR and FHIR Converter projects have debugging turned on for their respective projects. The Fhir Converter project should have the following entrypoint entry: entrypoint: /app/deploy/debug.sh The SHR project should have the following entrypoint entry: entrypoint: node --inspect=0.0.0.0:9230 /app/dist/app.js Make sure that you have the Remote Debugging setup as outlined in the Prerequisites section of this guide. Make sure that you have the relevant ports forwarded in VS Code for the SHR and FHIR Converter projects. Finally, make sure that you run yarn build on the project you want to debug, and also that you ran docker-compose -f debug.docker-compose.yml up --build -d after making any changes to the code to see them reflected in the running container.","title":"Turning on Remote Debugging for the projects:"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#postman-overview","text":"The Postman collection for the Botswana HIE Lab Workflows is located here: https://www.postman.com/itechuw/workspace/botswana-hie/collection/1525496-8be9c19c-9e7b-4316-adea-3604884af5d7?action=share&creator=1525496 For IPMS testing, we focus on the following folder: https://www.postman.com/itechuw/workspace/botswana-hie/folder/1525496-0c135557-d6a8-4928-a649-2546a18d075f?ctx=documentation We also use the hie-pilot.gov.bw environment. The Add Draft Order Bundle request sends a draft order that does result in concept and location mappings, but does not send an HL7 message to IPMS. It also generates new patient data as outlined in the Pre-request Script tab. The Add Requested Order Bundle request sends a requested order that does concept and location mappings, and also sends an HL7 message to IPMS. It uses the data generated by the Add Draft Order Bundle request, and can be re-run multiple times with the same patient information.","title":"Postman Overview"},{"location":"developer-guide/botswana/botswana-lab-workflows.html#openhie-testing","text":"For quickly testing changes to the Fhir Converter templates, you can re-run the converter request from OpenHIE, which can be accessed here: https://hie-pilot.gov.bw/ This page loads slowly as it tries to pull external resources that are not available on the network.","title":"OpenHIE Testing"},{"location":"developer-guide/common/lis-workflows-dev-guide.html","text":"Tutorial: Lab Order Communication between OpenMRS and OpenELIS In this tutorial, we will use the resources from this documentation - with support from the Laboratory Workflow Implementation Guide and OpenHIE Architecture Specifications - to determine create a pilot implementation of Lab Test Order and Result Communication between an Electronic Medical Record (EMR) and a Lab Information System . We will use validated open-source solutions for each component of our pilot setup, and will use the OpenHIE specifications to guide our approach, the selection and roles of different components, and the language we use for disucssing the various concepts. To get a better idea about the concepts and data elements were using, visit the Laboratory Workflows IG to a look at: 1. Our list of key concepts 2. Our logical model We will focus on the following target architecture for our setup, which you can check out in the IG : This architecture is based on the OpenHIE Specifications for Health Information Exchange components. For this tutorial, we will focus on using OpenMRS the reference implementation of an OpenHIE EMR, and OpenELIS, the reference implementation of an OpenHIE LIS. Data Model Task more info The Task resource is created along with the corresponding ServiceRequest resource when a clinician creates a TestOrder and decides to send it to OpenELIS. This resource is used to track the status of the lab order request from initiation to completion, and as a container for all other resources related to the given order. Example Task: { \"resourceType\": \"Task\", \"id\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\", \"identifier\": [ { \"system\": \"http://isanteplus.org/ext/task/identifier\", \"value\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\" } ], \"basedOn\": [ { \"reference\": \"ServiceRequest/ebf83ba0-9d3c-497f-9aa0-d839ec506202\", \"type\": \"ServiceRequest\" }, { \"reference\": \"ServiceRequest/73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"type\": \"ServiceRequest\" } ], \"status\": \"requested\", \"intent\": \"order\", \"for\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" }, \"authoredOn\": \"2020-04-28T17:33:19+00:00\", \"owner\": { \"reference\": \"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\", \"type\": \"Practitioner\" } } ServiceRequest more info The ServiceRequest resource represents the TestOrder placed in OpenMRS. It is referenced from the Task with the Task.basedOn element, and sent to OpenELIS with the Task to initiate the processing of the order. Example Service Request: { \"resourceType\": \"ServiceRequest\", \"id\": \"73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"status\": \"active\", \"intent\": \"order\", \"code\": { \"coding\": [ { \"code\": \"790AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"14682-9\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"790\" } ] }, \"subject\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" } } DiagnosticReport more info The DiagnosticReport resource is the container for the results of an Order, and holds these results in the DiagnosticReport.result element as references to Observation resources. Example Diagnostic Report { \"resourceType\": \"DiagnosticReport\", \"id\": \"93\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.163+00:00\", \"source\": \"#55t4lpDZF4q3TCZ0\" }, \"text\": { \"status\": \"generated\", \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><div class=\\\"hapiHeaderText\\\"> Untitled Diagnostic Report </div><table class=\\\"hapiPropertyTable\\\"><tbody><tr><td>Status</td><td>FINAL</td></tr></tbody></table></div>\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"result\": [ { \"reference\": \"Observation/92\", \"type\": \"Observation\" } ] } Observation more info The Observation resource contains the results of the Lab Order request. Example Observation: { \"resourceType\": \"Observation\", \"id\": \"92\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.124+00:00\", \"source\": \"#xAVz0uUE6c3l42Za\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"valueQuantity\": { \"value\": 55, \"unit\": \"UI/L\" } } Patient more info The Patient resource contains vital information for OpenELIS to fullfill the lab order request, and is referenced by the Task. Example Patient: { \"resourceType\": \"Patient\", \"id\": \"e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"identifier\": [ { \"id\": \"5981a256-d60c-44b1-beae-9bdd2cf572f8\", \"use\": \"official\", \"system\": \"iSantePlus ID\", \"value\": \"10012R\" }, { \"id\": \"75a67d54-6fff-44d1-9c3e-2116c967b475\", \"use\": \"usual\", \"system\": \"Code National\", \"value\": \"100000\" }, { \"id\": \"29447d21-3cd6-42a9-9ab2-79ebfa710a01\", \"use\": \"usual\", \"system\": \"ECID\", \"value\": \"04d759e0-5d02-11e8-b899-0242ac12000b\" } ], \"active\": true, \"name\": [ { \"id\": \"511275de-e301-44a3-95d2-28d0d3b35387\", \"family\": \"Mankowski\", \"given\": [ \"Piotr\" ] } ], \"gender\": \"male\", \"birthDate\": \"1987-01-01\", \"deceasedBoolean\": false, \"address\": [ { \"id\": \"d4f7c809-3d01-4032-b64d-4c22e8eccbbc\", \"use\": \"home\", \"country\": \"Haiti\" } ] } Useful Links Relevant FHIR Docs * Using Tasks in a RESTful Context * Workflow Module * Diagnostic Module * Example: Workflow states for a lab order for a blood test * Option G: POST of Task to fulfiller's system Relevant OpenMRS Talk Posts The handling and mapping of lab order status for the lab workflow Openmrs 3.x Setup OpenRMS 3.x on top an instance of the Reference Application click here for more infromation Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module Order Entry Ui Module Order Entry Owa Configure the required settings labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the above Modules. Note: The Lab test Concept should be of class Test ,and should be mapped to a Loinc code that matches a the Test Loinc Code in OpenELIS Go to the Reff App (2.x) Patient Dashbord Prescribed Medication Widget. see more on Creating Orders using the Order Entry Owa. If the Lab on FHIR module is rightly configured ,it will generate the lab FHIR Bundle and push to the remote Fhir Server for OpenELIS to poll the orders Start up the OpenELIS Update Task In order to be able to poll OpenELIS for available results, we need to turn on the following task in the OpenMRS scheduler: System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler Enable the patient-test-results-app for the 3.x Frontenx. Go to the Patient DashBoard in 3.x ui and click Test Results. iSant\u00e9Plus Install iSantePlus using one of these approaches . Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module IsantePlus FHIR Module Note : The above modules are installed by default by the docker setup Configure the required settings . labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the Lab On FHIR Modules. To place Lab Orders ,Fill the Laboratory Analysis Form , select OPenELIS as destination Lab and Save. Find Patient \u2192 Patient DashBord \u2192 Forms \u2192 Laboratory Analysis NB. The Patient Must have an active vist Start up the OpenELIS Update Task in order to poll for Completed Results from OpenELIS System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler To View The results ,Go to Laboratory History on the Patient DashBoard under General Actions. Find Patient \u2192 Patient DashBord \u2192 Laboratory History OpenELIS Global 2.6.x The FHIR based Lab Workflow is supported in OpenELIS 2.6 . Start an instance of OpenELIS with the following configuration properties set in the properties file. org.openelisglobal.fhirstore.uri=<localFhirServerUrl> . This is the Fhir Server that runs paralel with OPenELIS org.openelisglobal.remote.source.uri=<remoreFhirServerUr> . This is the Fhir server that the Lab on FHIR module points to ie via the labonfhir.openElisUrl org.openelisglobal.remote.source.updateStatus=true org.openelisglobal.remote.source.identifier=Practitioner/<userUuuid> .This is the UUID of the user who created the Order ie labonfhir.openElisUserUuid org.openelisglobal.task.useBasedOn=true org.openelisglobal.fhir.subscriber=h<remoreFhirServerUrl> . org.openelisglobal.fhir.subscriber.resources=Task,Patient,ServiceRequest,DiagnosticReport,Observation,Specimen,Practitioner,Encounter Ensure OpenELIS has the test that maps to the same LOINC code as the test Concept in OpenMRS. This can be added via the Admin page \u2192 Test Management \u2192 Add Tests Configure OpenELIS to accept electronic orders. Admin \u2192 Order Entry Configuration \u2192 external orders Search for the Electronic Orders ie Order \u2192 Electronic Orders and then Complete the Order Note that the user should have the right Lab Unit Priviledges to complete the Order After Results are captured and Validated , OpenELIS sends back the results to OpenMRS as a Diagnostic Report with an Observation","title":"Lis workflows dev guide"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#tutorial-lab-order-communication-between-openmrs-and-openelis","text":"In this tutorial, we will use the resources from this documentation - with support from the Laboratory Workflow Implementation Guide and OpenHIE Architecture Specifications - to determine create a pilot implementation of Lab Test Order and Result Communication between an Electronic Medical Record (EMR) and a Lab Information System . We will use validated open-source solutions for each component of our pilot setup, and will use the OpenHIE specifications to guide our approach, the selection and roles of different components, and the language we use for disucssing the various concepts. To get a better idea about the concepts and data elements were using, visit the Laboratory Workflows IG to a look at: 1. Our list of key concepts 2. Our logical model We will focus on the following target architecture for our setup, which you can check out in the IG : This architecture is based on the OpenHIE Specifications for Health Information Exchange components. For this tutorial, we will focus on using OpenMRS the reference implementation of an OpenHIE EMR, and OpenELIS, the reference implementation of an OpenHIE LIS.","title":"Tutorial: Lab Order Communication between OpenMRS and OpenELIS"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#data-model","text":"","title":"Data Model"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#task","text":"more info The Task resource is created along with the corresponding ServiceRequest resource when a clinician creates a TestOrder and decides to send it to OpenELIS. This resource is used to track the status of the lab order request from initiation to completion, and as a container for all other resources related to the given order. Example Task: { \"resourceType\": \"Task\", \"id\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\", \"identifier\": [ { \"system\": \"http://isanteplus.org/ext/task/identifier\", \"value\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\" } ], \"basedOn\": [ { \"reference\": \"ServiceRequest/ebf83ba0-9d3c-497f-9aa0-d839ec506202\", \"type\": \"ServiceRequest\" }, { \"reference\": \"ServiceRequest/73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"type\": \"ServiceRequest\" } ], \"status\": \"requested\", \"intent\": \"order\", \"for\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" }, \"authoredOn\": \"2020-04-28T17:33:19+00:00\", \"owner\": { \"reference\": \"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\", \"type\": \"Practitioner\" } }","title":"Task"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#servicerequest","text":"more info The ServiceRequest resource represents the TestOrder placed in OpenMRS. It is referenced from the Task with the Task.basedOn element, and sent to OpenELIS with the Task to initiate the processing of the order. Example Service Request: { \"resourceType\": \"ServiceRequest\", \"id\": \"73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"status\": \"active\", \"intent\": \"order\", \"code\": { \"coding\": [ { \"code\": \"790AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"14682-9\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"790\" } ] }, \"subject\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" } }","title":"ServiceRequest"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#diagnosticreport","text":"more info The DiagnosticReport resource is the container for the results of an Order, and holds these results in the DiagnosticReport.result element as references to Observation resources. Example Diagnostic Report { \"resourceType\": \"DiagnosticReport\", \"id\": \"93\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.163+00:00\", \"source\": \"#55t4lpDZF4q3TCZ0\" }, \"text\": { \"status\": \"generated\", \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><div class=\\\"hapiHeaderText\\\"> Untitled Diagnostic Report </div><table class=\\\"hapiPropertyTable\\\"><tbody><tr><td>Status</td><td>FINAL</td></tr></tbody></table></div>\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"result\": [ { \"reference\": \"Observation/92\", \"type\": \"Observation\" } ] }","title":"DiagnosticReport"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#observation","text":"more info The Observation resource contains the results of the Lab Order request. Example Observation: { \"resourceType\": \"Observation\", \"id\": \"92\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.124+00:00\", \"source\": \"#xAVz0uUE6c3l42Za\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"valueQuantity\": { \"value\": 55, \"unit\": \"UI/L\" } }","title":"Observation"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#patient","text":"more info The Patient resource contains vital information for OpenELIS to fullfill the lab order request, and is referenced by the Task. Example Patient: { \"resourceType\": \"Patient\", \"id\": \"e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"identifier\": [ { \"id\": \"5981a256-d60c-44b1-beae-9bdd2cf572f8\", \"use\": \"official\", \"system\": \"iSantePlus ID\", \"value\": \"10012R\" }, { \"id\": \"75a67d54-6fff-44d1-9c3e-2116c967b475\", \"use\": \"usual\", \"system\": \"Code National\", \"value\": \"100000\" }, { \"id\": \"29447d21-3cd6-42a9-9ab2-79ebfa710a01\", \"use\": \"usual\", \"system\": \"ECID\", \"value\": \"04d759e0-5d02-11e8-b899-0242ac12000b\" } ], \"active\": true, \"name\": [ { \"id\": \"511275de-e301-44a3-95d2-28d0d3b35387\", \"family\": \"Mankowski\", \"given\": [ \"Piotr\" ] } ], \"gender\": \"male\", \"birthDate\": \"1987-01-01\", \"deceasedBoolean\": false, \"address\": [ { \"id\": \"d4f7c809-3d01-4032-b64d-4c22e8eccbbc\", \"use\": \"home\", \"country\": \"Haiti\" } ] }","title":"Patient"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#useful-links","text":"Relevant FHIR Docs * Using Tasks in a RESTful Context * Workflow Module * Diagnostic Module * Example: Workflow states for a lab order for a blood test * Option G: POST of Task to fulfiller's system Relevant OpenMRS Talk Posts The handling and mapping of lab order status for the lab workflow","title":"Useful Links"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#openmrs-3x","text":"Setup OpenRMS 3.x on top an instance of the Reference Application click here for more infromation Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module Order Entry Ui Module Order Entry Owa Configure the required settings labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the above Modules. Note: The Lab test Concept should be of class Test ,and should be mapped to a Loinc code that matches a the Test Loinc Code in OpenELIS Go to the Reff App (2.x) Patient Dashbord Prescribed Medication Widget. see more on Creating Orders using the Order Entry Owa. If the Lab on FHIR module is rightly configured ,it will generate the lab FHIR Bundle and push to the remote Fhir Server for OpenELIS to poll the orders Start up the OpenELIS Update Task In order to be able to poll OpenELIS for available results, we need to turn on the following task in the OpenMRS scheduler: System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler Enable the patient-test-results-app for the 3.x Frontenx. Go to the Patient DashBoard in 3.x ui and click Test Results.","title":"Openmrs 3.x"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#isanteplus","text":"Install iSantePlus using one of these approaches . Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module IsantePlus FHIR Module Note : The above modules are installed by default by the docker setup Configure the required settings . labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the Lab On FHIR Modules. To place Lab Orders ,Fill the Laboratory Analysis Form , select OPenELIS as destination Lab and Save. Find Patient \u2192 Patient DashBord \u2192 Forms \u2192 Laboratory Analysis NB. The Patient Must have an active vist Start up the OpenELIS Update Task in order to poll for Completed Results from OpenELIS System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler To View The results ,Go to Laboratory History on the Patient DashBoard under General Actions. Find Patient \u2192 Patient DashBord \u2192 Laboratory History","title":"iSant\u00e9Plus"},{"location":"developer-guide/common/lis-workflows-dev-guide.html#openelis-global-26x","text":"The FHIR based Lab Workflow is supported in OpenELIS 2.6 . Start an instance of OpenELIS with the following configuration properties set in the properties file. org.openelisglobal.fhirstore.uri=<localFhirServerUrl> . This is the Fhir Server that runs paralel with OPenELIS org.openelisglobal.remote.source.uri=<remoreFhirServerUr> . This is the Fhir server that the Lab on FHIR module points to ie via the labonfhir.openElisUrl org.openelisglobal.remote.source.updateStatus=true org.openelisglobal.remote.source.identifier=Practitioner/<userUuuid> .This is the UUID of the user who created the Order ie labonfhir.openElisUserUuid org.openelisglobal.task.useBasedOn=true org.openelisglobal.fhir.subscriber=h<remoreFhirServerUrl> . org.openelisglobal.fhir.subscriber.resources=Task,Patient,ServiceRequest,DiagnosticReport,Observation,Specimen,Practitioner,Encounter Ensure OpenELIS has the test that maps to the same LOINC code as the test Concept in OpenMRS. This can be added via the Admin page \u2192 Test Management \u2192 Add Tests Configure OpenELIS to accept electronic orders. Admin \u2192 Order Entry Configuration \u2192 external orders Search for the Electronic Orders ie Order \u2192 Electronic Orders and then Complete the Order Note that the user should have the right Lab Unit Priviledges to complete the Order After Results are captured and Validated , OpenELIS sends back the results to OpenMRS as a Diagnostic Report with an Observation","title":"OpenELIS Global 2.6.x"},{"location":"developer-guide/common/packaging-hie-implementations.html","text":"Packaging Hie Implementations References: https://github.com/jembi/platform https://jembi.gitbook.io/openhim-platform/ https://jembi.gitbook.io/instant-v2/ Steps: 1. Add scripts for downloading Instant OpenHIE V2 CLI and add utilities. https://github.com/jembi/platform/blob/main/get-cli.sh https://github.com/jembi/platform/tree/main/utils 2. Add Dockerfile in root directory of the project that inherits from Instant OpenHIE Parent Docker Image https://github.com/jembi/platform/blob/main/Dockerfile 3. Download CLI ./get-cli.sh 4. Build and publish Docker image 4.1. Build Local Docker image 4.2. Publish Docker image 4.3. Update config.yml file 5. Add HIE components Migrating HIE Components to instant HIE V2 Description of components of instant HIE v2 config.yaml - Configuartion file for the project that has a list of the componenet packages and other project configurations Util folder - Contains scripts for bringing up and down the different components.These utilities are used in every packages swarm.sh file build-image.sh file - The file builds a local docker image that packages the instant HIE v2 project and allows it to be run using the instant CLI. NOTE: Make sure the image name and tag matches what you have in the config.yaml file. 4.get-cli.sh - It downloads the architecure specific instant CLI executable and saves it in the project root directory.This allows the CLI to be run with the ./instant command. 5.dockerfile - Packages the openHIE Components into a docker image and allows it to be run using the instant CLI.The image its self is built with the build-image.sh file .env file - Contains the settings for the various components.This file needs to be customised for each implementation. Description of components of instant openHIE V2 package 1.swarm.sh - Package specific file that controls the life cycle of the HIE components using docker swarm and the utilities from the util folder.This script contains all the intiliazation and tear down logic requried to bring the component up in the right context. 2.package-metadata.json - Contains default configuarations and settings for the package. 3.List of docker compose files - Varius services are defined with docker-compose files.Additional settings rquired to bring up these services in dev/cluster mode are separeted into there own docker-compose files.Boot up and control of these docker-compose files is defined in swarm.sh","title":"Packaging hie implementations"},{"location":"developer-guide/common/packaging-hie-implementations.html#packaging-hie-implementations","text":"","title":"Packaging Hie Implementations"},{"location":"developer-guide/common/packaging-hie-implementations.html#references","text":"https://github.com/jembi/platform https://jembi.gitbook.io/openhim-platform/ https://jembi.gitbook.io/instant-v2/","title":"References:"},{"location":"developer-guide/common/packaging-hie-implementations.html#steps","text":"","title":"Steps:"},{"location":"developer-guide/common/packaging-hie-implementations.html#1-add-scripts-for-downloading-instant-openhie-v2-cli-and-add-utilities","text":"https://github.com/jembi/platform/blob/main/get-cli.sh https://github.com/jembi/platform/tree/main/utils","title":"1. Add scripts for downloading Instant OpenHIE V2 CLI and add utilities."},{"location":"developer-guide/common/packaging-hie-implementations.html#2-add-dockerfile-in-root-directory-of-the-project-that-inherits-from-instant-openhie-parent-docker-image","text":"https://github.com/jembi/platform/blob/main/Dockerfile","title":"2. Add Dockerfile in root directory of the project that inherits from Instant OpenHIE Parent Docker Image"},{"location":"developer-guide/common/packaging-hie-implementations.html#3-download-cli","text":"./get-cli.sh","title":"3. Download CLI"},{"location":"developer-guide/common/packaging-hie-implementations.html#4-build-and-publish-docker-image","text":"","title":"4. Build and publish Docker image"},{"location":"developer-guide/common/packaging-hie-implementations.html#41-build-local-docker-image","text":"","title":"4.1. Build Local Docker image"},{"location":"developer-guide/common/packaging-hie-implementations.html#42-publish-docker-image","text":"","title":"4.2. Publish Docker image"},{"location":"developer-guide/common/packaging-hie-implementations.html#43-update-configyml-file","text":"","title":"4.3. Update config.yml file"},{"location":"developer-guide/common/packaging-hie-implementations.html#5-add-hie-components","text":"","title":"5. Add HIE components"},{"location":"developer-guide/common/packaging-hie-implementations.html#migrating-hie-components-to-instant-hie-v2","text":"","title":"Migrating HIE Components to instant HIE V2"},{"location":"developer-guide/common/packaging-hie-implementations.html#description-of-components-of-instant-hie-v2","text":"config.yaml - Configuartion file for the project that has a list of the componenet packages and other project configurations Util folder - Contains scripts for bringing up and down the different components.These utilities are used in every packages swarm.sh file build-image.sh file - The file builds a local docker image that packages the instant HIE v2 project and allows it to be run using the instant CLI. NOTE: Make sure the image name and tag matches what you have in the config.yaml file. 4.get-cli.sh - It downloads the architecure specific instant CLI executable and saves it in the project root directory.This allows the CLI to be run with the ./instant command. 5.dockerfile - Packages the openHIE Components into a docker image and allows it to be run using the instant CLI.The image its self is built with the build-image.sh file .env file - Contains the settings for the various components.This file needs to be customised for each implementation.","title":"Description of components of instant HIE v2"},{"location":"developer-guide/common/packaging-hie-implementations.html#description-of-components-of-instant-openhie-v2-package","text":"1.swarm.sh - Package specific file that controls the life cycle of the HIE components using docker swarm and the utilities from the util folder.This script contains all the intiliazation and tear down logic requried to bring the component up in the right context. 2.package-metadata.json - Contains default configuarations and settings for the package. 3.List of docker compose files - Varius services are defined with docker-compose files.Additional settings rquired to bring up these services in dev/cluster mode are separeted into there own docker-compose files.Boot up and control of these docker-compose files is defined in swarm.sh","title":"Description of components of instant openHIE V2 package"},{"location":"developer-guide/cote-d-ivoire/cdi-pim-workflow.html","text":"Dev Guide: Patient Identity Management Workflow in Cote d'Ivoire This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project. Demo Videos SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching","title":"Cdi pim workflow"},{"location":"developer-guide/cote-d-ivoire/cdi-pim-workflow.html#dev-guide-patient-identity-management-workflow-in-cote-divoire","text":"This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project.","title":"Dev Guide: Patient Identity Management Workflow in Cote d'Ivoire"},{"location":"developer-guide/cote-d-ivoire/cdi-pim-workflow.html#demo-videos","text":"SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching","title":"Demo Videos"},{"location":"developer-guide/haiti/haiti-coc-workflows.html","text":"Haiti HIE Workflow Development Guide Introduction This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project. Prerequesites Before getting started, make sure you complete the following prerequisites:","title":"Haiti HIE Workflow Development Guide"},{"location":"developer-guide/haiti/haiti-coc-workflows.html#haiti-hie-workflow-development-guide","text":"","title":"Haiti HIE Workflow Development Guide"},{"location":"developer-guide/haiti/haiti-coc-workflows.html#introduction","text":"This guide will go over development, configuration, and debugging the laboratory workflow for Botswana. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record https://github.com/I-TECH-UW/openhim-mediator-fhir-converter The functionality includes Kafka-managed workflows in the SHR project, and FHIR --> HL7 and HL7 --> FHIR mappings in the Fhir Converter project.","title":"Introduction"},{"location":"developer-guide/haiti/haiti-coc-workflows.html#prerequesites","text":"Before getting started, make sure you complete the following prerequisites:","title":"Prerequesites"},{"location":"developer-guide/zim/install-ziminstantv2.html","text":"Installation Guide: Zimbabawe HIE Introduction This section shows the quick instructions of running the ZIM HIE instantV2 setup. Requirements: Zim HIE repository ie https://github.com/mohcc/hie-zimbabwe.git Steps: 1.Clone the Zim HIE repository ie https://github.com/mohcc/hie-zimbabwe.git 2.Make sure you have an understanding of files listed under the (Migrating HIE Components to instant HIE V2) section above. 3.In the root folder of the cloned repository,run ./get-cli.sh.This downloads the architecure specific instant CLI executable and saves it in the root directory.This allows the CLI to be run with the ./instant command. 4.The above command creates three folders and you need only one basing on your operating system.We will concetrate on the instant-linux folder which you can rename to instant 5.Test that you can now run the CLI with the instant command by running ./instant,this should return a list of the avialable commands 6.You can now start launching the packages,start by launching the reverse proxy since its depended on by many other packages ie run ./instant package init -n reverse-proxy-nginx --env-file .env 7.You can now run any package that you want to start ie run ./instant package init -n addpackagenamehere --env-file .env","title":"Install ziminstantv2"},{"location":"developer-guide/zim/install-ziminstantv2.html#installation-guide-zimbabawe-hie","text":"","title":"Installation Guide: Zimbabawe HIE"},{"location":"developer-guide/zim/install-ziminstantv2.html#introduction","text":"This section shows the quick instructions of running the ZIM HIE instantV2 setup.","title":"Introduction"},{"location":"developer-guide/zim/install-ziminstantv2.html#requirements","text":"Zim HIE repository ie https://github.com/mohcc/hie-zimbabwe.git","title":"Requirements:"},{"location":"developer-guide/zim/install-ziminstantv2.html#steps","text":"1.Clone the Zim HIE repository ie https://github.com/mohcc/hie-zimbabwe.git 2.Make sure you have an understanding of files listed under the (Migrating HIE Components to instant HIE V2) section above. 3.In the root folder of the cloned repository,run ./get-cli.sh.This downloads the architecure specific instant CLI executable and saves it in the root directory.This allows the CLI to be run with the ./instant command. 4.The above command creates three folders and you need only one basing on your operating system.We will concetrate on the instant-linux folder which you can rename to instant 5.Test that you can now run the CLI with the instant command by running ./instant,this should return a list of the avialable commands 6.You can now start launching the packages,start by launching the reverse proxy since its depended on by many other packages ie run ./instant package init -n reverse-proxy-nginx --env-file .env 7.You can now run any package that you want to start ie run ./instant package init -n addpackagenamehere --env-file .env","title":"Steps:"},{"location":"developer-guide/zim/zim-pim-workflow.html","text":"Dev Guide: Patient Identity Management Workflow in Zimbabwe This guide will go over development, configuration, and debugging the laboratory workflow for Zimbabwe. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record The functionality includes Kafka-managed workflows in the SHR project, and FHIR mappings. Setup Walkthroughs OpenHIM Channel Configuration","title":"Zim pim workflow"},{"location":"developer-guide/zim/zim-pim-workflow.html#dev-guide-patient-identity-management-workflow-in-zimbabwe","text":"This guide will go over development, configuration, and debugging the laboratory workflow for Zimbabwe. This workflow includes functionality in the SHR and Fhir Converter projects, linked below: https://github.com/i-TECH-UW/shared-health-record The functionality includes Kafka-managed workflows in the SHR project, and FHIR mappings.","title":"Dev Guide: Patient Identity Management Workflow in Zimbabwe"},{"location":"developer-guide/zim/zim-pim-workflow.html#setup-walkthroughs","text":"OpenHIM Channel Configuration","title":"Setup Walkthroughs"},{"location":"fr-workflows/demos.html","text":"","title":"Demos"},{"location":"fr-workflows/dev-guide.html","text":"","title":"Dev guide"},{"location":"fr-workflows/fhir-resources.html","text":"","title":"Fhir resources"},{"location":"fr-workflows/overview.html","text":"","title":"Overview"},{"location":"lis-workflows/demos.html","text":"","title":"Demos"},{"location":"lis-workflows/fhir-resources.html","text":"Task more info The Task resource is created along with the corresponding ServiceRequest resource when a clinician creates a TestOrder and decides to send it to OpenELIS. This resource is used to track the status of the lab order request from initiation to completion, and as a container for all other resources related to the given order. Example Task: { \"resourceType\": \"Task\", \"id\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\", \"identifier\": [ { \"system\": \"http://isanteplus.org/ext/task/identifier\", \"value\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\" } ], \"basedOn\": [ { \"reference\": \"ServiceRequest/ebf83ba0-9d3c-497f-9aa0-d839ec506202\", \"type\": \"ServiceRequest\" }, { \"reference\": \"ServiceRequest/73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"type\": \"ServiceRequest\" } ], \"status\": \"requested\", \"intent\": \"order\", \"for\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" }, \"authoredOn\": \"2020-04-28T17:33:19+00:00\", \"owner\": { \"reference\": \"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\", \"type\": \"Practitioner\" } } ServiceRequest more info The ServiceRequest resource represents the TestOrder placed in OpenMRS. It is referenced from the Task with the Task.basedOn element, and sent to OpenELIS with the Task to initiate the processing of the order. Example Service Request: { \"resourceType\": \"ServiceRequest\", \"id\": \"73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"status\": \"active\", \"intent\": \"order\", \"code\": { \"coding\": [ { \"code\": \"790AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"14682-9\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"790\" } ] }, \"subject\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" } } DiagnosticReport more info The DiagnosticReport resource is the container for the results of an Order, and holds these results in the DiagnosticReport.result element as references to Observation resources. Example Diagnostic Report { \"resourceType\": \"DiagnosticReport\", \"id\": \"93\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.163+00:00\", \"source\": \"#55t4lpDZF4q3TCZ0\" }, \"text\": { \"status\": \"generated\", \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><div class=\\\"hapiHeaderText\\\"> Untitled Diagnostic Report </div><table class=\\\"hapiPropertyTable\\\"><tbody><tr><td>Status</td><td>FINAL</td></tr></tbody></table></div>\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"result\": [ { \"reference\": \"Observation/92\", \"type\": \"Observation\" } ] } Observation more info The Observation resource contains the results of the Lab Order request. Example Observation: { \"resourceType\": \"Observation\", \"id\": \"92\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.124+00:00\", \"source\": \"#xAVz0uUE6c3l42Za\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"valueQuantity\": { \"value\": 55, \"unit\": \"UI/L\" } } Patient more info The Patient resource contains vital information for OpenELIS to fullfill the lab order request, and is referenced by the Task. Example Patient: { \"resourceType\": \"Patient\", \"id\": \"e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"identifier\": [ { \"id\": \"5981a256-d60c-44b1-beae-9bdd2cf572f8\", \"use\": \"official\", \"system\": \"iSantePlus ID\", \"value\": \"10012R\" }, { \"id\": \"75a67d54-6fff-44d1-9c3e-2116c967b475\", \"use\": \"usual\", \"system\": \"Code National\", \"value\": \"100000\" }, { \"id\": \"29447d21-3cd6-42a9-9ab2-79ebfa710a01\", \"use\": \"usual\", \"system\": \"ECID\", \"value\": \"04d759e0-5d02-11e8-b899-0242ac12000b\" } ], \"active\": true, \"name\": [ { \"id\": \"511275de-e301-44a3-95d2-28d0d3b35387\", \"family\": \"Mankowski\", \"given\": [ \"Piotr\" ] } ], \"gender\": \"male\", \"birthDate\": \"1987-01-01\", \"deceasedBoolean\": false, \"address\": [ { \"id\": \"d4f7c809-3d01-4032-b64d-4c22e8eccbbc\", \"use\": \"home\", \"country\": \"Haiti\" } ] } Useful Links Relevant FHIR Docs * Using Tasks in a RESTful Context * Workflow Module * Diagnostic Module * Example: Workflow states for a lab order for a blood test * Option G: POST of Task to fulfiller's system Relevant OpenMRS Talk Posts The handling and mapping of lab order status for the lab workflow","title":"Fhir resources"},{"location":"lis-workflows/fhir-resources.html#task","text":"more info The Task resource is created along with the corresponding ServiceRequest resource when a clinician creates a TestOrder and decides to send it to OpenELIS. This resource is used to track the status of the lab order request from initiation to completion, and as a container for all other resources related to the given order. Example Task: { \"resourceType\": \"Task\", \"id\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\", \"identifier\": [ { \"system\": \"http://isanteplus.org/ext/task/identifier\", \"value\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\" } ], \"basedOn\": [ { \"reference\": \"ServiceRequest/ebf83ba0-9d3c-497f-9aa0-d839ec506202\", \"type\": \"ServiceRequest\" }, { \"reference\": \"ServiceRequest/73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"type\": \"ServiceRequest\" } ], \"status\": \"requested\", \"intent\": \"order\", \"for\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" }, \"authoredOn\": \"2020-04-28T17:33:19+00:00\", \"owner\": { \"reference\": \"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\", \"type\": \"Practitioner\" } }","title":"Task"},{"location":"lis-workflows/fhir-resources.html#servicerequest","text":"more info The ServiceRequest resource represents the TestOrder placed in OpenMRS. It is referenced from the Task with the Task.basedOn element, and sent to OpenELIS with the Task to initiate the processing of the order. Example Service Request: { \"resourceType\": \"ServiceRequest\", \"id\": \"73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"status\": \"active\", \"intent\": \"order\", \"code\": { \"coding\": [ { \"code\": \"790AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"14682-9\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"790\" } ] }, \"subject\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" } }","title":"ServiceRequest"},{"location":"lis-workflows/fhir-resources.html#diagnosticreport","text":"more info The DiagnosticReport resource is the container for the results of an Order, and holds these results in the DiagnosticReport.result element as references to Observation resources. Example Diagnostic Report { \"resourceType\": \"DiagnosticReport\", \"id\": \"93\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.163+00:00\", \"source\": \"#55t4lpDZF4q3TCZ0\" }, \"text\": { \"status\": \"generated\", \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><div class=\\\"hapiHeaderText\\\"> Untitled Diagnostic Report </div><table class=\\\"hapiPropertyTable\\\"><tbody><tr><td>Status</td><td>FINAL</td></tr></tbody></table></div>\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"result\": [ { \"reference\": \"Observation/92\", \"type\": \"Observation\" } ] }","title":"DiagnosticReport"},{"location":"lis-workflows/fhir-resources.html#observation","text":"more info The Observation resource contains the results of the Lab Order request. Example Observation: { \"resourceType\": \"Observation\", \"id\": \"92\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.124+00:00\", \"source\": \"#xAVz0uUE6c3l42Za\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"valueQuantity\": { \"value\": 55, \"unit\": \"UI/L\" } }","title":"Observation"},{"location":"lis-workflows/fhir-resources.html#patient","text":"more info The Patient resource contains vital information for OpenELIS to fullfill the lab order request, and is referenced by the Task. Example Patient: { \"resourceType\": \"Patient\", \"id\": \"e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"identifier\": [ { \"id\": \"5981a256-d60c-44b1-beae-9bdd2cf572f8\", \"use\": \"official\", \"system\": \"iSantePlus ID\", \"value\": \"10012R\" }, { \"id\": \"75a67d54-6fff-44d1-9c3e-2116c967b475\", \"use\": \"usual\", \"system\": \"Code National\", \"value\": \"100000\" }, { \"id\": \"29447d21-3cd6-42a9-9ab2-79ebfa710a01\", \"use\": \"usual\", \"system\": \"ECID\", \"value\": \"04d759e0-5d02-11e8-b899-0242ac12000b\" } ], \"active\": true, \"name\": [ { \"id\": \"511275de-e301-44a3-95d2-28d0d3b35387\", \"family\": \"Mankowski\", \"given\": [ \"Piotr\" ] } ], \"gender\": \"male\", \"birthDate\": \"1987-01-01\", \"deceasedBoolean\": false, \"address\": [ { \"id\": \"d4f7c809-3d01-4032-b64d-4c22e8eccbbc\", \"use\": \"home\", \"country\": \"Haiti\" } ] }","title":"Patient"},{"location":"lis-workflows/fhir-resources.html#useful-links","text":"Relevant FHIR Docs * Using Tasks in a RESTful Context * Workflow Module * Diagnostic Module * Example: Workflow states for a lab order for a blood test * Option G: POST of Task to fulfiller's system Relevant OpenMRS Talk Posts The handling and mapping of lab order status for the lab workflow","title":"Useful Links"},{"location":"lis-workflows/implementer-guide.html","text":"Getting Started To get started in implementing the EMR-LIS workflow between electronic systems, it is best to understand the full scope of high level steps that will possibly need to be done, depending on your situation in the environment you are implementing in. In general, these high-level steps may need to be taken. Details about each of these steps and the possible caveats will follow. Identify the minimum data set to be exchanged between the systems. Use a universally unique identification system (coding) for identifying and mapping lab tests for both systems. Extract or create a laboratory test catalog from both the EMR and LIS. Crosswalk the listing of lab tests between the EMR and LIS to map those lab tests to the unique ID system (coding). Map all other relevant concepts and identifiers needed between EMR and LIS Identify the data exchange method between the systems based on your HIE and infrastructure context. Build out the technological approach for the workflow within and between the EMR and LIS. Identify and develop mechanisms for handling potential issues and caveats. Step #1: Identify a minimum dataset Working with stakeholders, key partners, and system users, your team will need to identify the minimum data set to be exchanged between the systems. Resources to inform the minimum data set could be paper forms that are used by providers for clinical orders, lab order and test result forms used by the laboratory, data sets from the EMR and LIS, and input from relevant technical working groups/steering committees, clinical partners and laboratory partners, and system users. It is critical that the technical stewards / teams of the systems participate in this definition of the minimum data set to help determine what data is available in the systems, identify gaps in data or system abilities in capturing/providing that data, and feasibility in the system utilizing that data from the other system. Resources Step #2: Identify a standard coding terminology Successful communication of laboratory orders can only happen if each system involved is using a common language for key concepts like Lab test types. Aa common terminology is critical to correctly understand and process the messages sent and recieved. Many EMR and LIS systems have not been built using the same terminology for the laboratory orders and results, and therefore, must be mapped to an agreed upon common terminology for that exchange. To do this, your team will need to work with stakeholders and key partners to either create a local set of shared terminology that uses unique IDs for each term, or your team can utilize an international standard coding system to create this shared terminology set. We recommend using the LOINC international standard for that shared terminology set of orders and results needed for your context. Resources - LOINC specification Step #3: Identify the relevant concepts from each system Each EMR, LIS, or other system that is partificating in the Laboratory Workflows will have a set of concepts key for this communication. Some systems use standard terminologies like Loinc, and others have custom concepts unique to that system. In both cases, we need identify and catalog the relevant concepts in each system. This exercise can be done manually, using a spreadsheet or similar tool to create a line listing of the supported laboratory test types, result types, panels, units, and other key concepts from each system. For example, we might end up with two lists, one from the EMR and one from the LIS. This test catalog will be used to map between the systems in step 4. Note: Alternatively, we can use a terminology management service such as Open Concept Lab for cataloging, mapping, and managing our concepts. A tutorial for this approach is coming soon! Resources - Example: Haiti OpenELIS Lab System Test Catalog Step #4: Create Mappings between the concept catalogs We need to crosswalk the listing of lab tests between the EMR and LIS to map those lab tests to the unique ID system (coding) In step #2, your team identified the shared terminology set that would stand as the source of truth for all terminologies that are exchanged in your HIE and provide unique identifiers for that terminology. Using your laboratory test catalogs created in step #3, you will need to now map your lab tests and results from both the EMR and the LIS to the shared terminology set. We recommend the use of LOINC codes as the mapping identifier. Problem Solving: In some cases, the EMR may allow ordering tests by panel. If the order only provides the panel and does not include individual tests, you will need to map panels to individual tests for the order and develop an additional mechanism to handle the translation for the proper exchange to the LIS. Resources - Example: Botswana EMR-LIS Terminology Mapping - Example: Haiti iSantePlus Terminology Mapping to LOINC Step 5: Map all other relevant concepts and identifiers needed between EMR and LIS Many times in systems that are not based on standards, the technical architectural decisions means the requirements for data fields may be different than the requirements in other systems for those data elements. In these cases, when messages are exchanged between systems, those data elements that fit the requirements for the sending system do not meet the requirements for that data in the receiving system and will cause an error, and ultimately the transaction fails and the message and its data is not accepted into the receiving system. To minimize errors of this type, ensure there is mapping of all other relevant concepts between EMR and LIS. Some of the most common concepts/data that might have issues do to requirements and algorithms tied to that data include (but are not limited to): Patient Identifiers Facility Identifiers System Identifiers Problem Solving : Frequently, the EMR and LIS have different required formats, lengths, or algorithms for identifiers that can cause errors and mismatches when messaging between systems. There may be negotiating and workarounds that will need to be discussed and a mechanism for handling developed. An example of this was in the Haiti iSantePlus (OpenMRS) exchange with a proprietary lab system that had specific algorithms attached to the patient identifiers fields in their database that caused a mismatch with the data sent. In addition, there were other data elements that needed \u201cmassaging\u201d due to character limits that don\u2019t accommodate the full length of the data sent. These types of issues needed extensive negotiation and custom development of how the data in the message would be constructed, formatted, and consumed in order to reliably exchange data between these systems.* Step #6: Identify data exchange patterns based on your HIE and infrastructure context There are multiple ways to approach the exchange of data, and will be decided by understanding the context in which your exchange will operate, and the requirements for data availability from the exchange. You will use either a push of data from a system, or a pull of data from a system, or a mixed method approach depending on the implementation, system availability and connectivity, components available in the HIE, and requirements for timeliness and data availability from the exchange. For example, you can set up your exchange of orders to use any of the following approaches: - Push data from EMR to central repository (i.e. SHR), the central repository alerts the LIS, and subsequently the data is pulled by the LIS - The LIS can periodically check for data to be pulled from an EMR or a central repository system (i.e. SHR), conducting the pull with all data with an order status of ordered - An order is pushed by an EMR automatically to the LIS. In this case, there is no way to know if the order reached the LIS or not. We do not recommend this approach when using FHIR due to the lack of any receipt acknowledge messaging in the FHIR workflow standard. Step #7: Build out the technological approach for the workflow within and between the EMR and LIS Use the technical artifacts in the Implementation Guide and the detailed technical sections in this SOP to develop and configure the EMR and LIS exchange. Every EMR-LIS exchange is somewhat unique, and will require customization of these artifacts and approaches to meet the needs of the context you are working in. For additional support during your build phase, engage with other developers and implementers in the relevant global goods communities of practice, such as OpenHIE LIS COP, OpenMRS FHIR Squad, and LIS software forums (i.e. OpenELIS). Many folks are eager to share their experience and provide answers for how to use these technical artifacts and tools to achieve this exchange. In addition, our team is happy to answer questions you may have when setting up your exchange following this guide. Resources - OpenMRS FHIR Squad , FHIR Squad Bi-Weekly Calls , and Talk FHIR Forum OpenHIE LIS COP and Slack OpenELIS Forum Step #8: Identify and develop mechanisms for handling potential issues and caveats Exchanges between EMR and LIS are not an easy thing to accomplish due to the many nuances to the workflows and the data collected and exchanged in the process. Your team will need to identify additional potential issues for the exchange specific to the workflows you are addressing, and develop mechanisms to handle those. Other problem areas to look for are, but no limited to: - Canceled and Rejected lab orders - Corrected Results after report out - Specialized and interim/intermediate results (e.g., Microbiology) - Ordering of test panels rather than individual lab tests - Intermittent connectivity and infrastructure issues Communication Overview Lab Orders The lab order workflow follows the OpenHIE specification for standard lab ordering between an EMR and LIS. The workflow is detailed in the following sequence diagram: Interaction Data Transaction Options 1 Create Lab Order Order Save generates a new FHIR Task Bundled Order by creating a Task FHIR R4 Task Resource with a reference to a Service Request with order information 2 Send Lab Order FHIR Task bundled order is sent to the IOL. Task status is aligned with the FHIR workflow communication pattern found here 3,4 Send New Lab Order Bundled order is routed through the IOL to both the SHR and the LIS 5 Save Order and Update Order Status FHIR R4 Task Resource Status is updated locally to either rejected or accepted . A FHIR R4 ServiceRequest Resource (example) is created for order processing with a reference to the associated task. EMR test requests and LIS orders are matched based on LOINC codes. 6 Send New Lab Order Bundled order is routed through the IOL to both the SHR and the LIS 7,8 Send Order Update IOL routes the updated FHIR R4 Tasks to the SHR and the EMR 9 Update FHIR Task Status FHIR task status updated locally Lab Results Interaction Data Transaction Options 1 Results Saved and FHIR Task Updated The results save generates a FHIR R4 DiagnosticReport Resource () with referenced FHIR R4 Observation resources () to store the results, and a reference to the associated Patient and Task Resource. 2 Search for Updated FHIR Tasks FHIR R4 Search for Tasks based on tasks for which the owner is the EMR, and which have a status \u2018completed\u2019 3 Return FHIR Updated Tasks FHIR R4 Task Resource with status \u2018completed\u2019 and reference to FHIR R4 DiagnosticReport FHIR R4 bundle search response () 4 Search for Associated Diagnostic Reports FHIR R4 Search for DiagnosticReports by UUID 5 Return Associated Diagnostic Reports FHIR R4 DiagnosticReport Resource with 6 Update FHIR Task Status, Store DiagnosticReports and Save Results","title":"Implementer guide"},{"location":"lis-workflows/implementer-guide.html#getting-started","text":"To get started in implementing the EMR-LIS workflow between electronic systems, it is best to understand the full scope of high level steps that will possibly need to be done, depending on your situation in the environment you are implementing in. In general, these high-level steps may need to be taken. Details about each of these steps and the possible caveats will follow. Identify the minimum data set to be exchanged between the systems. Use a universally unique identification system (coding) for identifying and mapping lab tests for both systems. Extract or create a laboratory test catalog from both the EMR and LIS. Crosswalk the listing of lab tests between the EMR and LIS to map those lab tests to the unique ID system (coding). Map all other relevant concepts and identifiers needed between EMR and LIS Identify the data exchange method between the systems based on your HIE and infrastructure context. Build out the technological approach for the workflow within and between the EMR and LIS. Identify and develop mechanisms for handling potential issues and caveats.","title":"Getting Started"},{"location":"lis-workflows/implementer-guide.html#step-1-identify-a-minimum-dataset","text":"Working with stakeholders, key partners, and system users, your team will need to identify the minimum data set to be exchanged between the systems. Resources to inform the minimum data set could be paper forms that are used by providers for clinical orders, lab order and test result forms used by the laboratory, data sets from the EMR and LIS, and input from relevant technical working groups/steering committees, clinical partners and laboratory partners, and system users. It is critical that the technical stewards / teams of the systems participate in this definition of the minimum data set to help determine what data is available in the systems, identify gaps in data or system abilities in capturing/providing that data, and feasibility in the system utilizing that data from the other system. Resources","title":"Step #1: Identify a minimum dataset"},{"location":"lis-workflows/implementer-guide.html#step-2-identify-a-standard-coding-terminology","text":"Successful communication of laboratory orders can only happen if each system involved is using a common language for key concepts like Lab test types. Aa common terminology is critical to correctly understand and process the messages sent and recieved. Many EMR and LIS systems have not been built using the same terminology for the laboratory orders and results, and therefore, must be mapped to an agreed upon common terminology for that exchange. To do this, your team will need to work with stakeholders and key partners to either create a local set of shared terminology that uses unique IDs for each term, or your team can utilize an international standard coding system to create this shared terminology set. We recommend using the LOINC international standard for that shared terminology set of orders and results needed for your context. Resources - LOINC specification","title":"Step #2: Identify a standard coding terminology"},{"location":"lis-workflows/implementer-guide.html#step-3-identify-the-relevant-concepts-from-each-system","text":"Each EMR, LIS, or other system that is partificating in the Laboratory Workflows will have a set of concepts key for this communication. Some systems use standard terminologies like Loinc, and others have custom concepts unique to that system. In both cases, we need identify and catalog the relevant concepts in each system. This exercise can be done manually, using a spreadsheet or similar tool to create a line listing of the supported laboratory test types, result types, panels, units, and other key concepts from each system. For example, we might end up with two lists, one from the EMR and one from the LIS. This test catalog will be used to map between the systems in step 4. Note: Alternatively, we can use a terminology management service such as Open Concept Lab for cataloging, mapping, and managing our concepts. A tutorial for this approach is coming soon! Resources - Example: Haiti OpenELIS Lab System Test Catalog","title":"Step #3: Identify the relevant concepts from each system"},{"location":"lis-workflows/implementer-guide.html#step-4-create-mappings-between-the-concept-catalogs","text":"We need to crosswalk the listing of lab tests between the EMR and LIS to map those lab tests to the unique ID system (coding) In step #2, your team identified the shared terminology set that would stand as the source of truth for all terminologies that are exchanged in your HIE and provide unique identifiers for that terminology. Using your laboratory test catalogs created in step #3, you will need to now map your lab tests and results from both the EMR and the LIS to the shared terminology set. We recommend the use of LOINC codes as the mapping identifier. Problem Solving: In some cases, the EMR may allow ordering tests by panel. If the order only provides the panel and does not include individual tests, you will need to map panels to individual tests for the order and develop an additional mechanism to handle the translation for the proper exchange to the LIS. Resources - Example: Botswana EMR-LIS Terminology Mapping - Example: Haiti iSantePlus Terminology Mapping to LOINC","title":"Step #4: Create Mappings between the concept catalogs"},{"location":"lis-workflows/implementer-guide.html#step-5-map-all-other-relevant-concepts-and-identifiers-needed-between-emr-and-lis","text":"Many times in systems that are not based on standards, the technical architectural decisions means the requirements for data fields may be different than the requirements in other systems for those data elements. In these cases, when messages are exchanged between systems, those data elements that fit the requirements for the sending system do not meet the requirements for that data in the receiving system and will cause an error, and ultimately the transaction fails and the message and its data is not accepted into the receiving system. To minimize errors of this type, ensure there is mapping of all other relevant concepts between EMR and LIS. Some of the most common concepts/data that might have issues do to requirements and algorithms tied to that data include (but are not limited to): Patient Identifiers Facility Identifiers System Identifiers Problem Solving : Frequently, the EMR and LIS have different required formats, lengths, or algorithms for identifiers that can cause errors and mismatches when messaging between systems. There may be negotiating and workarounds that will need to be discussed and a mechanism for handling developed. An example of this was in the Haiti iSantePlus (OpenMRS) exchange with a proprietary lab system that had specific algorithms attached to the patient identifiers fields in their database that caused a mismatch with the data sent. In addition, there were other data elements that needed \u201cmassaging\u201d due to character limits that don\u2019t accommodate the full length of the data sent. These types of issues needed extensive negotiation and custom development of how the data in the message would be constructed, formatted, and consumed in order to reliably exchange data between these systems.*","title":"Step 5: Map all other relevant concepts and identifiers needed between EMR and LIS"},{"location":"lis-workflows/implementer-guide.html#step-6-identify-data-exchange-patterns-based-on-your-hie-and-infrastructure-context","text":"There are multiple ways to approach the exchange of data, and will be decided by understanding the context in which your exchange will operate, and the requirements for data availability from the exchange. You will use either a push of data from a system, or a pull of data from a system, or a mixed method approach depending on the implementation, system availability and connectivity, components available in the HIE, and requirements for timeliness and data availability from the exchange. For example, you can set up your exchange of orders to use any of the following approaches: - Push data from EMR to central repository (i.e. SHR), the central repository alerts the LIS, and subsequently the data is pulled by the LIS - The LIS can periodically check for data to be pulled from an EMR or a central repository system (i.e. SHR), conducting the pull with all data with an order status of ordered - An order is pushed by an EMR automatically to the LIS. In this case, there is no way to know if the order reached the LIS or not. We do not recommend this approach when using FHIR due to the lack of any receipt acknowledge messaging in the FHIR workflow standard.","title":"Step #6: Identify data exchange patterns based on your HIE and infrastructure context"},{"location":"lis-workflows/implementer-guide.html#step-7-build-out-the-technological-approach-for-the-workflow-within-and-between-the-emr-and-lis","text":"Use the technical artifacts in the Implementation Guide and the detailed technical sections in this SOP to develop and configure the EMR and LIS exchange. Every EMR-LIS exchange is somewhat unique, and will require customization of these artifacts and approaches to meet the needs of the context you are working in. For additional support during your build phase, engage with other developers and implementers in the relevant global goods communities of practice, such as OpenHIE LIS COP, OpenMRS FHIR Squad, and LIS software forums (i.e. OpenELIS). Many folks are eager to share their experience and provide answers for how to use these technical artifacts and tools to achieve this exchange. In addition, our team is happy to answer questions you may have when setting up your exchange following this guide. Resources - OpenMRS FHIR Squad , FHIR Squad Bi-Weekly Calls , and Talk FHIR Forum OpenHIE LIS COP and Slack OpenELIS Forum","title":"Step #7: Build out the technological approach for the workflow within and between the EMR and LIS"},{"location":"lis-workflows/implementer-guide.html#step-8-identify-and-develop-mechanisms-for-handling-potential-issues-and-caveats","text":"Exchanges between EMR and LIS are not an easy thing to accomplish due to the many nuances to the workflows and the data collected and exchanged in the process. Your team will need to identify additional potential issues for the exchange specific to the workflows you are addressing, and develop mechanisms to handle those. Other problem areas to look for are, but no limited to: - Canceled and Rejected lab orders - Corrected Results after report out - Specialized and interim/intermediate results (e.g., Microbiology) - Ordering of test panels rather than individual lab tests - Intermittent connectivity and infrastructure issues","title":"Step #8: Identify and develop mechanisms for handling potential issues and caveats"},{"location":"lis-workflows/implementer-guide.html#communication-overview","text":"","title":"Communication Overview"},{"location":"lis-workflows/implementer-guide.html#lab-orders","text":"The lab order workflow follows the OpenHIE specification for standard lab ordering between an EMR and LIS. The workflow is detailed in the following sequence diagram: Interaction Data Transaction Options 1 Create Lab Order Order Save generates a new FHIR Task Bundled Order by creating a Task FHIR R4 Task Resource with a reference to a Service Request with order information 2 Send Lab Order FHIR Task bundled order is sent to the IOL. Task status is aligned with the FHIR workflow communication pattern found here 3,4 Send New Lab Order Bundled order is routed through the IOL to both the SHR and the LIS 5 Save Order and Update Order Status FHIR R4 Task Resource Status is updated locally to either rejected or accepted . A FHIR R4 ServiceRequest Resource (example) is created for order processing with a reference to the associated task. EMR test requests and LIS orders are matched based on LOINC codes. 6 Send New Lab Order Bundled order is routed through the IOL to both the SHR and the LIS 7,8 Send Order Update IOL routes the updated FHIR R4 Tasks to the SHR and the EMR 9 Update FHIR Task Status FHIR task status updated locally","title":"Lab Orders"},{"location":"lis-workflows/implementer-guide.html#lab-results","text":"Interaction Data Transaction Options 1 Results Saved and FHIR Task Updated The results save generates a FHIR R4 DiagnosticReport Resource () with referenced FHIR R4 Observation resources () to store the results, and a reference to the associated Patient and Task Resource. 2 Search for Updated FHIR Tasks FHIR R4 Search for Tasks based on tasks for which the owner is the EMR, and which have a status \u2018completed\u2019 3 Return FHIR Updated Tasks FHIR R4 Task Resource with status \u2018completed\u2019 and reference to FHIR R4 DiagnosticReport FHIR R4 bundle search response () 4 Search for Associated Diagnostic Reports FHIR R4 Search for DiagnosticReports by UUID 5 Return Associated Diagnostic Reports FHIR R4 DiagnosticReport Resource with 6 Update FHIR Task Status, Store DiagnosticReports and Save Results","title":"Lab Results"},{"location":"lis-workflows/lis-workflows.html","text":"Laboratory Workflows Overview You can view a video demo of the LIS-EMR exchange between OpenMRS(EMR) and OpenELIS here A critical workflow for high quality care is the timely and accurate exchange of laboratory orders and test results between the clinic and laboratories. To digitize this workflow, you need an electronic medical record (EMR) capable of capturing orders, and a laboratory information system (LIS/LIMS) capable of order entry and capturing of test results associated with that order. Using the most recent informatics standards, this digitized Lab Order and Results workflow SOP focuses on the use of FHIR and the OpenHIE architectural pattern for implementation, and includes several implementation approaches depending on context (i.e. direct bridge, older messaging standards only in the local systems). This Lab Order and Results workflow utilizes the FHIR Workflow Module and suggested Communication Patterns to implement the ordering of lab tests from an EMR to an LIS and resulting from LIS to EMR. Implementer Guide Getting Started To get started in implementing the EMR-LIS workflow between electronic systems, it is best to understand the full scope of high level steps that will possibly need to be done, depending on your situation in the environment you are implementing in. In general, these high-level steps may need to be taken. Details about each of these steps and the possible caveats will follow. Identify the minimum data set to be exchanged between the systems. Use a universally unique identification system (coding) for identifying and mapping lab tests for both systems. Extract or create a laboratory test catalog from both the EMR and LIS. Crosswalk the listing of lab tests between the EMR and LIS to map those lab tests to the unique ID system (coding). Map all other relevant concepts and identifiers needed between EMR and LIS Identify the data exchange method between the systems based on your HIE and infrastructure context. Build out the technological approach for the workflow within and between the EMR and LIS. Identify and develop mechanisms for handling potential issues and caveats. Step #1: Identify a minimum dataset Working with stakeholders, key partners, and system users, your team will need to identify the minimum data set to be exchanged between the systems. Resources to inform the minimum data set could be paper forms that are used by providers for clinical orders, lab order and test result forms used by the laboratory, data sets from the EMR and LIS, and input from relevant technical working groups/steering committees, clinical partners and laboratory partners, and system users. It is critical that the technical stewards / teams of the systems participate in this definition of the minimum data set to help determine what data is available in the systems, identify gaps in data or system abilities in capturing/providing that data, and feasibility in the system utilizing that data from the other system. Resources Step #2: Identify a standard coding terminology Successful communication of laboratory orders can only happen if each system involved is using a common language for key concepts like Lab test types. Aa common terminology is critical to correctly understand and process the messages sent and recieved. Many EMR and LIS systems have not been built using the same terminology for the laboratory orders and results, and therefore, must be mapped to an agreed upon common terminology for that exchange. To do this, your team will need to work with stakeholders and key partners to either create a local set of shared terminology that uses unique IDs for each term, or your team can utilize an international standard coding system to create this shared terminology set. We recommend using the LOINC international standard for that shared terminology set of orders and results needed for your context. Resources - LOINC specification Step #3: Identify the relevant concepts from each system Each EMR, LIS, or other system that is partificating in the Laboratory Workflows will have a set of concepts key for this communication. Some systems use standard terminologies like Loinc, and others have custom concepts unique to that system. In both cases, we need identify and catalog the relevant concepts in each system. This exercise can be done manually, using a spreadsheet or similar tool to create a line listing of the supported laboratory test types, result types, panels, units, and other key concepts from each system. For example, we might end up with two lists, one from the EMR and one from the LIS. This test catalog will be used to map between the systems in step 4. Note: Alternatively, we can use a terminology management service such as Open Concept Lab for cataloging, mapping, and managing our concepts. A tutorial for this approach is coming soon! Resources - Example: Haiti OpenELIS Lab System Test Catalog Step #4: Create Mappings between the concept catalogs We need to crosswalk the listing of lab tests between the EMR and LIS to map those lab tests to the unique ID system (coding) In step #2, your team identified the shared terminology set that would stand as the source of truth for all terminologies that are exchanged in your HIE and provide unique identifiers for that terminology. Using your laboratory test catalogs created in step #3, you will need to now map your lab tests and results from both the EMR and the LIS to the shared terminology set. We recommend the use of LOINC codes as the mapping identifier. Problem Solving: In some cases, the EMR may allow ordering tests by panel. If the order only provides the panel and does not include individual tests, you will need to map panels to individual tests for the order and develop an additional mechanism to handle the translation for the proper exchange to the LIS. Resources - Example: Botswana EMR-LIS Terminology Mapping - Example: Haiti iSantePlus Terminology Mapping to LOINC Step 5: Map all other relevant concepts and identifiers needed between EMR and LIS Many times in systems that are not based on standards, the technical architectural decisions means the requirements for data fields may be different than the requirements in other systems for those data elements. In these cases, when messages are exchanged between systems, those data elements that fit the requirements for the sending system do not meet the requirements for that data in the receiving system and will cause an error, and ultimately the transaction fails and the message and its data is not accepted into the receiving system. To minimize errors of this type, ensure there is mapping of all other relevant concepts between EMR and LIS. Some of the most common concepts/data that might have issues do to requirements and algorithms tied to that data include (but are not limited to): Patient Identifiers Facility Identifiers System Identifiers Problem Solving : Frequently, the EMR and LIS have different required formats, lengths, or algorithms for identifiers that can cause errors and mismatches when messaging between systems. There may be negotiating and workarounds that will need to be discussed and a mechanism for handling developed. An example of this was in the Haiti iSantePlus (OpenMRS) exchange with a proprietary lab system that had specific algorithms attached to the patient identifiers fields in their database that caused a mismatch with the data sent. In addition, there were other data elements that needed \u201cmassaging\u201d due to character limits that don\u2019t accommodate the full length of the data sent. These types of issues needed extensive negotiation and custom development of how the data in the message would be constructed, formatted, and consumed in order to reliably exchange data between these systems.* Step #6: Identify data exchange patterns based on your HIE and infrastructure context There are multiple ways to approach the exchange of data, and will be decided by understanding the context in which your exchange will operate, and the requirements for data availability from the exchange. You will use either a push of data from a system, or a pull of data from a system, or a mixed method approach depending on the implementation, system availability and connectivity, components available in the HIE, and requirements for timeliness and data availability from the exchange. For example, you can set up your exchange of orders to use any of the following approaches: - Push data from EMR to central repository (i.e. SHR), the central repository alerts the LIS, and subsequently the data is pulled by the LIS - The LIS can periodically check for data to be pulled from an EMR or a central repository system (i.e. SHR), conducting the pull with all data with an order status of ordered - An order is pushed by an EMR automatically to the LIS. In this case, there is no way to know if the order reached the LIS or not. We do not recommend this approach when using FHIR due to the lack of any receipt acknowledge messaging in the FHIR workflow standard. Step #7: Build out the technological approach for the workflow within and between the EMR and LIS Use the technical artifacts in the Implementation Guide and the detailed technical sections in this SOP to develop and configure the EMR and LIS exchange. Every EMR-LIS exchange is somewhat unique, and will require customization of these artifacts and approaches to meet the needs of the context you are working in. For additional support during your build phase, engage with other developers and implementers in the relevant global goods communities of practice, such as OpenHIE LIS COP, OpenMRS FHIR Squad, and LIS software forums (i.e. OpenELIS). Many folks are eager to share their experience and provide answers for how to use these technical artifacts and tools to achieve this exchange. In addition, our team is happy to answer questions you may have when setting up your exchange following this guide. Resources - OpenMRS FHIR Squad , FHIR Squad Bi-Weekly Calls , and Talk FHIR Forum OpenHIE LIS COP and Slack OpenELIS Forum Step #8: Identify and develop mechanisms for handling potential issues and caveats Exchanges between EMR and LIS are not an easy thing to accomplish due to the many nuances to the workflows and the data collected and exchanged in the process. Your team will need to identify additional potential issues for the exchange specific to the workflows you are addressing, and develop mechanisms to handle those. Other problem areas to look for are, but no limited to: - Canceled and Rejected lab orders - Corrected Results after report out - Specialized and interim/intermediate results (e.g., Microbiology) - Ordering of test panels rather than individual lab tests - Intermittent connectivity and infrastructure issues Communication Overview Lab Orders The lab order workflow follows the OpenHIE specification for standard lab ordering between an EMR and LIS. The workflow is detailed in the following sequence diagram: Interaction Data Transaction Options 1 Create Lab Order Order Save generates a new FHIR Task Bundled Order by creating a Task FHIR R4 Task Resource with a reference to a Service Request with order information 2 Send Lab Order FHIR Task bundled order is sent to the IOL. Task status is aligned with the FHIR workflow communication pattern found here 3,4 Send New Lab Order Bundled order is routed through the IOL to both the SHR and the LIS 5 Save Order and Update Order Status FHIR R4 Task Resource Status is updated locally to either rejected or accepted . A FHIR R4 ServiceRequest Resource (example) is created for order processing with a reference to the associated task. EMR test requests and LIS orders are matched based on LOINC codes. 6 Send New Lab Order Bundled order is routed through the IOL to both the SHR and the LIS 7,8 Send Order Update IOL routes the updated FHIR R4 Tasks to the SHR and the EMR 9 Update FHIR Task Status FHIR task status updated locally Lab Results Interaction Data Transaction Options 1 Results Saved and FHIR Task Updated The results save generates a FHIR R4 DiagnosticReport Resource () with referenced FHIR R4 Observation resources () to store the results, and a reference to the associated Patient and Task Resource. 2 Search for Updated FHIR Tasks FHIR R4 Search for Tasks based on tasks for which the owner is the EMR, and which have a status \u2018completed\u2019 3 Return FHIR Updated Tasks FHIR R4 Task Resource with status \u2018completed\u2019 and reference to FHIR R4 DiagnosticReport FHIR R4 bundle search response () 4 Search for Associated Diagnostic Reports FHIR R4 Search for DiagnosticReports by UUID 5 Return Associated Diagnostic Reports FHIR R4 DiagnosticReport Resource with 6 Update FHIR Task Status, Store DiagnosticReports and Save Results Developer Guide Tutorial: Lab Order Communication between OpenMRS and OpenELIS In this tutorial, we will use the resources from this documentation - with support from the Laboratory Workflow Implementation Guide and OpenHIE Architecture Specifications - to determine create a pilot implementation of Lab Test Order and Result Communication between an Electronic Medical Record (EMR) and a Lab Information System . We will use validated open-source solutions for each component of our pilot setup, and will use the OpenHIE specifications to guide our approach, the selection and roles of different components, and the language we use for disucssing the various concepts. To get a better idea about the concepts and data elements were using, visit the Laboratory Workflows IG to a look at: 1. Our list of key concepts 2. Our logical model We will focus on the following target architecture for our setup, which you can check out in the IG : This architecture is based on the OpenHIE Specifications for Health Information Exchange components. For this tutorial, we will focus on using OpenMRS the reference implementation of an OpenHIE EMR, and OpenELIS, the reference implementation of an OpenHIE LIS. Data Model Task more info The Task resource is created along with the corresponding ServiceRequest resource when a clinician creates a TestOrder and decides to send it to OpenELIS. This resource is used to track the status of the lab order request from initiation to completion, and as a container for all other resources related to the given order. Example Task: { \"resourceType\": \"Task\", \"id\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\", \"identifier\": [ { \"system\": \"http://isanteplus.org/ext/task/identifier\", \"value\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\" } ], \"basedOn\": [ { \"reference\": \"ServiceRequest/ebf83ba0-9d3c-497f-9aa0-d839ec506202\", \"type\": \"ServiceRequest\" }, { \"reference\": \"ServiceRequest/73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"type\": \"ServiceRequest\" } ], \"status\": \"requested\", \"intent\": \"order\", \"for\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" }, \"authoredOn\": \"2020-04-28T17:33:19+00:00\", \"owner\": { \"reference\": \"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\", \"type\": \"Practitioner\" } } ServiceRequest more info The ServiceRequest resource represents the TestOrder placed in OpenMRS. It is referenced from the Task with the Task.basedOn element, and sent to OpenELIS with the Task to initiate the processing of the order. Example Service Request: { \"resourceType\": \"ServiceRequest\", \"id\": \"73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"status\": \"active\", \"intent\": \"order\", \"code\": { \"coding\": [ { \"code\": \"790AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"14682-9\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"790\" } ] }, \"subject\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" } } DiagnosticReport more info The DiagnosticReport resource is the container for the results of an Order, and holds these results in the DiagnosticReport.result element as references to Observation resources. Example Diagnostic Report { \"resourceType\": \"DiagnosticReport\", \"id\": \"93\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.163+00:00\", \"source\": \"#55t4lpDZF4q3TCZ0\" }, \"text\": { \"status\": \"generated\", \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><div class=\\\"hapiHeaderText\\\"> Untitled Diagnostic Report </div><table class=\\\"hapiPropertyTable\\\"><tbody><tr><td>Status</td><td>FINAL</td></tr></tbody></table></div>\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"result\": [ { \"reference\": \"Observation/92\", \"type\": \"Observation\" } ] } Observation more info The Observation resource contains the results of the Lab Order request. Example Observation: { \"resourceType\": \"Observation\", \"id\": \"92\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.124+00:00\", \"source\": \"#xAVz0uUE6c3l42Za\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"valueQuantity\": { \"value\": 55, \"unit\": \"UI/L\" } } Patient more info The Patient resource contains vital information for OpenELIS to fullfill the lab order request, and is referenced by the Task. Example Patient: { \"resourceType\": \"Patient\", \"id\": \"e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"identifier\": [ { \"id\": \"5981a256-d60c-44b1-beae-9bdd2cf572f8\", \"use\": \"official\", \"system\": \"iSantePlus ID\", \"value\": \"10012R\" }, { \"id\": \"75a67d54-6fff-44d1-9c3e-2116c967b475\", \"use\": \"usual\", \"system\": \"Code National\", \"value\": \"100000\" }, { \"id\": \"29447d21-3cd6-42a9-9ab2-79ebfa710a01\", \"use\": \"usual\", \"system\": \"ECID\", \"value\": \"04d759e0-5d02-11e8-b899-0242ac12000b\" } ], \"active\": true, \"name\": [ { \"id\": \"511275de-e301-44a3-95d2-28d0d3b35387\", \"family\": \"Mankowski\", \"given\": [ \"Piotr\" ] } ], \"gender\": \"male\", \"birthDate\": \"1987-01-01\", \"deceasedBoolean\": false, \"address\": [ { \"id\": \"d4f7c809-3d01-4032-b64d-4c22e8eccbbc\", \"use\": \"home\", \"country\": \"Haiti\" } ] } Useful Links Relevant FHIR Docs * Using Tasks in a RESTful Context * Workflow Module * Diagnostic Module * Example: Workflow states for a lab order for a blood test * Option G: POST of Task to fulfiller's system Relevant OpenMRS Talk Posts The handling and mapping of lab order status for the lab workflow Openmrs 3.x Setup OpenRMS 3.x on top an instance of the Reference Application click here for more infromation Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module Order Entry Ui Module Order Entry Owa Configure the required settings labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the above Modules. Note: The Lab test Concept should be of class Test ,and should be mapped to a Loinc code that matches a the Test Loinc Code in OpenELIS Go to the Reff App (2.x) Patient Dashbord Prescribed Medication Widget. see more on Creating Orders using the Order Entry Owa. If the Lab on FHIR module is rightly configured ,it will generate the lab FHIR Bundle and push to the remote Fhir Server for OpenELIS to poll the orders Start up the OpenELIS Update Task In order to be able to poll OpenELIS for available results, we need to turn on the following task in the OpenMRS scheduler: System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler Enable the patient-test-results-app for the 3.x Frontenx. Go to the Patient DashBoard in 3.x ui and click Test Results. iSant\u00e9Plus Install iSantePlus using one of these approaches . Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module IsantePlus FHIR Module Note : The above modules are installed by default by the docker setup Configure the required settings . labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the Lab On FHIR Modules. To place Lab Orders ,Fill the Laboratory Analysis Form , select OPenELIS as destination Lab and Save. Find Patient \u2192 Patient DashBord \u2192 Forms \u2192 Laboratory Analysis NB. The Patient Must have an active vist Start up the OpenELIS Update Task in order to poll for Completed Results from OpenELIS System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler To View The results ,Go to Laboratory History on the Patient DashBoard under General Actions. Find Patient \u2192 Patient DashBord \u2192 Laboratory History OpenELIS Global 2.6.x The FHIR based Lab Workflow is supported in OpenELIS 2.6 . Start an instance of OpenELIS with the following configuration properties set in the properties file. org.openelisglobal.fhirstore.uri=<localFhirServerUrl> . This is the Fhir Server that runs paralel with OPenELIS org.openelisglobal.remote.source.uri=<remoreFhirServerUr> . This is the Fhir server that the Lab on FHIR module points to ie via the labonfhir.openElisUrl org.openelisglobal.remote.source.updateStatus=true org.openelisglobal.remote.source.identifier=Practitioner/<userUuuid> .This is the UUID of the user who created the Order ie labonfhir.openElisUserUuid org.openelisglobal.task.useBasedOn=true org.openelisglobal.fhir.subscriber=h<remoreFhirServerUrl> . org.openelisglobal.fhir.subscriber.resources=Task,Patient,ServiceRequest,DiagnosticReport,Observation,Specimen,Practitioner,Encounter Ensure OpenELIS has the test that maps to the same LOINC code as the test Concept in OpenMRS. This can be added via the Admin page \u2192 Test Management \u2192 Add Tests Configure OpenELIS to accept electronic orders. Admin \u2192 Order Entry Configuration \u2192 external orders Search for the Electronic Orders ie Order \u2192 Electronic Orders and then Complete the Order Note that the user should have the right Lab Unit Priviledges to complete the Order After Results are captured and Validated , OpenELIS sends back the results to OpenMRS as a Diagnostic Report with an Observation","title":"Laboratory Workflows"},{"location":"lis-workflows/lis-workflows.html#laboratory-workflows","text":"","title":"Laboratory Workflows"},{"location":"lis-workflows/lis-workflows.html#overview","text":"You can view a video demo of the LIS-EMR exchange between OpenMRS(EMR) and OpenELIS here A critical workflow for high quality care is the timely and accurate exchange of laboratory orders and test results between the clinic and laboratories. To digitize this workflow, you need an electronic medical record (EMR) capable of capturing orders, and a laboratory information system (LIS/LIMS) capable of order entry and capturing of test results associated with that order. Using the most recent informatics standards, this digitized Lab Order and Results workflow SOP focuses on the use of FHIR and the OpenHIE architectural pattern for implementation, and includes several implementation approaches depending on context (i.e. direct bridge, older messaging standards only in the local systems). This Lab Order and Results workflow utilizes the FHIR Workflow Module and suggested Communication Patterns to implement the ordering of lab tests from an EMR to an LIS and resulting from LIS to EMR.","title":"Overview"},{"location":"lis-workflows/lis-workflows.html#implementer-guide","text":"","title":"Implementer Guide"},{"location":"lis-workflows/lis-workflows.html#getting-started","text":"To get started in implementing the EMR-LIS workflow between electronic systems, it is best to understand the full scope of high level steps that will possibly need to be done, depending on your situation in the environment you are implementing in. In general, these high-level steps may need to be taken. Details about each of these steps and the possible caveats will follow. Identify the minimum data set to be exchanged between the systems. Use a universally unique identification system (coding) for identifying and mapping lab tests for both systems. Extract or create a laboratory test catalog from both the EMR and LIS. Crosswalk the listing of lab tests between the EMR and LIS to map those lab tests to the unique ID system (coding). Map all other relevant concepts and identifiers needed between EMR and LIS Identify the data exchange method between the systems based on your HIE and infrastructure context. Build out the technological approach for the workflow within and between the EMR and LIS. Identify and develop mechanisms for handling potential issues and caveats.","title":"Getting Started"},{"location":"lis-workflows/lis-workflows.html#step-1-identify-a-minimum-dataset","text":"Working with stakeholders, key partners, and system users, your team will need to identify the minimum data set to be exchanged between the systems. Resources to inform the minimum data set could be paper forms that are used by providers for clinical orders, lab order and test result forms used by the laboratory, data sets from the EMR and LIS, and input from relevant technical working groups/steering committees, clinical partners and laboratory partners, and system users. It is critical that the technical stewards / teams of the systems participate in this definition of the minimum data set to help determine what data is available in the systems, identify gaps in data or system abilities in capturing/providing that data, and feasibility in the system utilizing that data from the other system. Resources","title":"Step #1: Identify a minimum dataset"},{"location":"lis-workflows/lis-workflows.html#step-2-identify-a-standard-coding-terminology","text":"Successful communication of laboratory orders can only happen if each system involved is using a common language for key concepts like Lab test types. Aa common terminology is critical to correctly understand and process the messages sent and recieved. Many EMR and LIS systems have not been built using the same terminology for the laboratory orders and results, and therefore, must be mapped to an agreed upon common terminology for that exchange. To do this, your team will need to work with stakeholders and key partners to either create a local set of shared terminology that uses unique IDs for each term, or your team can utilize an international standard coding system to create this shared terminology set. We recommend using the LOINC international standard for that shared terminology set of orders and results needed for your context. Resources - LOINC specification","title":"Step #2: Identify a standard coding terminology"},{"location":"lis-workflows/lis-workflows.html#step-3-identify-the-relevant-concepts-from-each-system","text":"Each EMR, LIS, or other system that is partificating in the Laboratory Workflows will have a set of concepts key for this communication. Some systems use standard terminologies like Loinc, and others have custom concepts unique to that system. In both cases, we need identify and catalog the relevant concepts in each system. This exercise can be done manually, using a spreadsheet or similar tool to create a line listing of the supported laboratory test types, result types, panels, units, and other key concepts from each system. For example, we might end up with two lists, one from the EMR and one from the LIS. This test catalog will be used to map between the systems in step 4. Note: Alternatively, we can use a terminology management service such as Open Concept Lab for cataloging, mapping, and managing our concepts. A tutorial for this approach is coming soon! Resources - Example: Haiti OpenELIS Lab System Test Catalog","title":"Step #3: Identify the relevant concepts from each system"},{"location":"lis-workflows/lis-workflows.html#step-4-create-mappings-between-the-concept-catalogs","text":"We need to crosswalk the listing of lab tests between the EMR and LIS to map those lab tests to the unique ID system (coding) In step #2, your team identified the shared terminology set that would stand as the source of truth for all terminologies that are exchanged in your HIE and provide unique identifiers for that terminology. Using your laboratory test catalogs created in step #3, you will need to now map your lab tests and results from both the EMR and the LIS to the shared terminology set. We recommend the use of LOINC codes as the mapping identifier. Problem Solving: In some cases, the EMR may allow ordering tests by panel. If the order only provides the panel and does not include individual tests, you will need to map panels to individual tests for the order and develop an additional mechanism to handle the translation for the proper exchange to the LIS. Resources - Example: Botswana EMR-LIS Terminology Mapping - Example: Haiti iSantePlus Terminology Mapping to LOINC","title":"Step #4: Create Mappings between the concept catalogs"},{"location":"lis-workflows/lis-workflows.html#step-5-map-all-other-relevant-concepts-and-identifiers-needed-between-emr-and-lis","text":"Many times in systems that are not based on standards, the technical architectural decisions means the requirements for data fields may be different than the requirements in other systems for those data elements. In these cases, when messages are exchanged between systems, those data elements that fit the requirements for the sending system do not meet the requirements for that data in the receiving system and will cause an error, and ultimately the transaction fails and the message and its data is not accepted into the receiving system. To minimize errors of this type, ensure there is mapping of all other relevant concepts between EMR and LIS. Some of the most common concepts/data that might have issues do to requirements and algorithms tied to that data include (but are not limited to): Patient Identifiers Facility Identifiers System Identifiers Problem Solving : Frequently, the EMR and LIS have different required formats, lengths, or algorithms for identifiers that can cause errors and mismatches when messaging between systems. There may be negotiating and workarounds that will need to be discussed and a mechanism for handling developed. An example of this was in the Haiti iSantePlus (OpenMRS) exchange with a proprietary lab system that had specific algorithms attached to the patient identifiers fields in their database that caused a mismatch with the data sent. In addition, there were other data elements that needed \u201cmassaging\u201d due to character limits that don\u2019t accommodate the full length of the data sent. These types of issues needed extensive negotiation and custom development of how the data in the message would be constructed, formatted, and consumed in order to reliably exchange data between these systems.*","title":"Step 5: Map all other relevant concepts and identifiers needed between EMR and LIS"},{"location":"lis-workflows/lis-workflows.html#step-6-identify-data-exchange-patterns-based-on-your-hie-and-infrastructure-context","text":"There are multiple ways to approach the exchange of data, and will be decided by understanding the context in which your exchange will operate, and the requirements for data availability from the exchange. You will use either a push of data from a system, or a pull of data from a system, or a mixed method approach depending on the implementation, system availability and connectivity, components available in the HIE, and requirements for timeliness and data availability from the exchange. For example, you can set up your exchange of orders to use any of the following approaches: - Push data from EMR to central repository (i.e. SHR), the central repository alerts the LIS, and subsequently the data is pulled by the LIS - The LIS can periodically check for data to be pulled from an EMR or a central repository system (i.e. SHR), conducting the pull with all data with an order status of ordered - An order is pushed by an EMR automatically to the LIS. In this case, there is no way to know if the order reached the LIS or not. We do not recommend this approach when using FHIR due to the lack of any receipt acknowledge messaging in the FHIR workflow standard.","title":"Step #6: Identify data exchange patterns based on your HIE and infrastructure context"},{"location":"lis-workflows/lis-workflows.html#step-7-build-out-the-technological-approach-for-the-workflow-within-and-between-the-emr-and-lis","text":"Use the technical artifacts in the Implementation Guide and the detailed technical sections in this SOP to develop and configure the EMR and LIS exchange. Every EMR-LIS exchange is somewhat unique, and will require customization of these artifacts and approaches to meet the needs of the context you are working in. For additional support during your build phase, engage with other developers and implementers in the relevant global goods communities of practice, such as OpenHIE LIS COP, OpenMRS FHIR Squad, and LIS software forums (i.e. OpenELIS). Many folks are eager to share their experience and provide answers for how to use these technical artifacts and tools to achieve this exchange. In addition, our team is happy to answer questions you may have when setting up your exchange following this guide. Resources - OpenMRS FHIR Squad , FHIR Squad Bi-Weekly Calls , and Talk FHIR Forum OpenHIE LIS COP and Slack OpenELIS Forum","title":"Step #7: Build out the technological approach for the workflow within and between the EMR and LIS"},{"location":"lis-workflows/lis-workflows.html#step-8-identify-and-develop-mechanisms-for-handling-potential-issues-and-caveats","text":"Exchanges between EMR and LIS are not an easy thing to accomplish due to the many nuances to the workflows and the data collected and exchanged in the process. Your team will need to identify additional potential issues for the exchange specific to the workflows you are addressing, and develop mechanisms to handle those. Other problem areas to look for are, but no limited to: - Canceled and Rejected lab orders - Corrected Results after report out - Specialized and interim/intermediate results (e.g., Microbiology) - Ordering of test panels rather than individual lab tests - Intermittent connectivity and infrastructure issues","title":"Step #8: Identify and develop mechanisms for handling potential issues and caveats"},{"location":"lis-workflows/lis-workflows.html#communication-overview","text":"","title":"Communication Overview"},{"location":"lis-workflows/lis-workflows.html#lab-orders","text":"The lab order workflow follows the OpenHIE specification for standard lab ordering between an EMR and LIS. The workflow is detailed in the following sequence diagram: Interaction Data Transaction Options 1 Create Lab Order Order Save generates a new FHIR Task Bundled Order by creating a Task FHIR R4 Task Resource with a reference to a Service Request with order information 2 Send Lab Order FHIR Task bundled order is sent to the IOL. Task status is aligned with the FHIR workflow communication pattern found here 3,4 Send New Lab Order Bundled order is routed through the IOL to both the SHR and the LIS 5 Save Order and Update Order Status FHIR R4 Task Resource Status is updated locally to either rejected or accepted . A FHIR R4 ServiceRequest Resource (example) is created for order processing with a reference to the associated task. EMR test requests and LIS orders are matched based on LOINC codes. 6 Send New Lab Order Bundled order is routed through the IOL to both the SHR and the LIS 7,8 Send Order Update IOL routes the updated FHIR R4 Tasks to the SHR and the EMR 9 Update FHIR Task Status FHIR task status updated locally","title":"Lab Orders"},{"location":"lis-workflows/lis-workflows.html#lab-results","text":"Interaction Data Transaction Options 1 Results Saved and FHIR Task Updated The results save generates a FHIR R4 DiagnosticReport Resource () with referenced FHIR R4 Observation resources () to store the results, and a reference to the associated Patient and Task Resource. 2 Search for Updated FHIR Tasks FHIR R4 Search for Tasks based on tasks for which the owner is the EMR, and which have a status \u2018completed\u2019 3 Return FHIR Updated Tasks FHIR R4 Task Resource with status \u2018completed\u2019 and reference to FHIR R4 DiagnosticReport FHIR R4 bundle search response () 4 Search for Associated Diagnostic Reports FHIR R4 Search for DiagnosticReports by UUID 5 Return Associated Diagnostic Reports FHIR R4 DiagnosticReport Resource with 6 Update FHIR Task Status, Store DiagnosticReports and Save Results","title":"Lab Results"},{"location":"lis-workflows/lis-workflows.html#developer-guide","text":"","title":"Developer Guide"},{"location":"lis-workflows/lis-workflows.html#tutorial-lab-order-communication-between-openmrs-and-openelis","text":"In this tutorial, we will use the resources from this documentation - with support from the Laboratory Workflow Implementation Guide and OpenHIE Architecture Specifications - to determine create a pilot implementation of Lab Test Order and Result Communication between an Electronic Medical Record (EMR) and a Lab Information System . We will use validated open-source solutions for each component of our pilot setup, and will use the OpenHIE specifications to guide our approach, the selection and roles of different components, and the language we use for disucssing the various concepts. To get a better idea about the concepts and data elements were using, visit the Laboratory Workflows IG to a look at: 1. Our list of key concepts 2. Our logical model We will focus on the following target architecture for our setup, which you can check out in the IG : This architecture is based on the OpenHIE Specifications for Health Information Exchange components. For this tutorial, we will focus on using OpenMRS the reference implementation of an OpenHIE EMR, and OpenELIS, the reference implementation of an OpenHIE LIS.","title":"Tutorial: Lab Order Communication between OpenMRS and OpenELIS"},{"location":"lis-workflows/lis-workflows.html#data-model","text":"","title":"Data Model"},{"location":"lis-workflows/lis-workflows.html#task","text":"more info The Task resource is created along with the corresponding ServiceRequest resource when a clinician creates a TestOrder and decides to send it to OpenELIS. This resource is used to track the status of the lab order request from initiation to completion, and as a container for all other resources related to the given order. Example Task: { \"resourceType\": \"Task\", \"id\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\", \"identifier\": [ { \"system\": \"http://isanteplus.org/ext/task/identifier\", \"value\": \"88ffa7fb-0419-4097-8b45-24f0d843c5ea\" } ], \"basedOn\": [ { \"reference\": \"ServiceRequest/ebf83ba0-9d3c-497f-9aa0-d839ec506202\", \"type\": \"ServiceRequest\" }, { \"reference\": \"ServiceRequest/73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"type\": \"ServiceRequest\" } ], \"status\": \"requested\", \"intent\": \"order\", \"for\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" }, \"authoredOn\": \"2020-04-28T17:33:19+00:00\", \"owner\": { \"reference\": \"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\", \"type\": \"Practitioner\" } }","title":"Task"},{"location":"lis-workflows/lis-workflows.html#servicerequest","text":"more info The ServiceRequest resource represents the TestOrder placed in OpenMRS. It is referenced from the Task with the Task.basedOn element, and sent to OpenELIS with the Task to initiate the processing of the order. Example Service Request: { \"resourceType\": \"ServiceRequest\", \"id\": \"73e96ecb-a78d-41c8-a55f-d9b90f759e5f\", \"status\": \"active\", \"intent\": \"order\", \"code\": { \"coding\": [ { \"code\": \"790AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"14682-9\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"790\" } ] }, \"subject\": { \"reference\": \"Patient/e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"type\": \"Patient\" }, \"encounter\": { \"reference\": \"Encounter/7f5aabd9-6375-47c8-a8d6-30f219b6e2f1\", \"type\": \"Encounter\" } }","title":"ServiceRequest"},{"location":"lis-workflows/lis-workflows.html#diagnosticreport","text":"more info The DiagnosticReport resource is the container for the results of an Order, and holds these results in the DiagnosticReport.result element as references to Observation resources. Example Diagnostic Report { \"resourceType\": \"DiagnosticReport\", \"id\": \"93\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.163+00:00\", \"source\": \"#55t4lpDZF4q3TCZ0\" }, \"text\": { \"status\": \"generated\", \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><div class=\\\"hapiHeaderText\\\"> Untitled Diagnostic Report </div><table class=\\\"hapiPropertyTable\\\"><tbody><tr><td>Status</td><td>FINAL</td></tr></tbody></table></div>\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"result\": [ { \"reference\": \"Observation/92\", \"type\": \"Observation\" } ] }","title":"DiagnosticReport"},{"location":"lis-workflows/lis-workflows.html#observation","text":"more info The Observation resource contains the results of the Lab Order request. Example Observation: { \"resourceType\": \"Observation\", \"id\": \"92\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2020-04-28T17:33:36.124+00:00\", \"source\": \"#xAVz0uUE6c3l42Za\" }, \"identifier\": [ { \"system\": \"https://isanteplusdemo.com/openmrs/ws/fhir2/\", \"value\": \"ebf83ba0-9d3c-497f-9aa0-d839ec506202\" } ], \"status\": \"final\", \"code\": { \"coding\": [ { \"code\": \"1008AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, { \"system\": \"http://loinc.org\", \"code\": \"22748-8\" }, { \"system\": \"urn:oid:2.16.840.1.113883.3.7201\", \"code\": \"1008\" } ] }, \"subject\": { \"reference\": \"Patient/2\" }, \"valueQuantity\": { \"value\": 55, \"unit\": \"UI/L\" } }","title":"Observation"},{"location":"lis-workflows/lis-workflows.html#patient","text":"more info The Patient resource contains vital information for OpenELIS to fullfill the lab order request, and is referenced by the Task. Example Patient: { \"resourceType\": \"Patient\", \"id\": \"e14e9bda-d273-4c74-8509-5732a4ebaf19\", \"identifier\": [ { \"id\": \"5981a256-d60c-44b1-beae-9bdd2cf572f8\", \"use\": \"official\", \"system\": \"iSantePlus ID\", \"value\": \"10012R\" }, { \"id\": \"75a67d54-6fff-44d1-9c3e-2116c967b475\", \"use\": \"usual\", \"system\": \"Code National\", \"value\": \"100000\" }, { \"id\": \"29447d21-3cd6-42a9-9ab2-79ebfa710a01\", \"use\": \"usual\", \"system\": \"ECID\", \"value\": \"04d759e0-5d02-11e8-b899-0242ac12000b\" } ], \"active\": true, \"name\": [ { \"id\": \"511275de-e301-44a3-95d2-28d0d3b35387\", \"family\": \"Mankowski\", \"given\": [ \"Piotr\" ] } ], \"gender\": \"male\", \"birthDate\": \"1987-01-01\", \"deceasedBoolean\": false, \"address\": [ { \"id\": \"d4f7c809-3d01-4032-b64d-4c22e8eccbbc\", \"use\": \"home\", \"country\": \"Haiti\" } ] }","title":"Patient"},{"location":"lis-workflows/lis-workflows.html#useful-links","text":"Relevant FHIR Docs * Using Tasks in a RESTful Context * Workflow Module * Diagnostic Module * Example: Workflow states for a lab order for a blood test * Option G: POST of Task to fulfiller's system Relevant OpenMRS Talk Posts The handling and mapping of lab order status for the lab workflow","title":"Useful Links"},{"location":"lis-workflows/lis-workflows.html#openmrs-3x","text":"Setup OpenRMS 3.x on top an instance of the Reference Application click here for more infromation Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module Order Entry Ui Module Order Entry Owa Configure the required settings labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the above Modules. Note: The Lab test Concept should be of class Test ,and should be mapped to a Loinc code that matches a the Test Loinc Code in OpenELIS Go to the Reff App (2.x) Patient Dashbord Prescribed Medication Widget. see more on Creating Orders using the Order Entry Owa. If the Lab on FHIR module is rightly configured ,it will generate the lab FHIR Bundle and push to the remote Fhir Server for OpenELIS to poll the orders Start up the OpenELIS Update Task In order to be able to poll OpenELIS for available results, we need to turn on the following task in the OpenMRS scheduler: System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler Enable the patient-test-results-app for the 3.x Frontenx. Go to the Patient DashBoard in 3.x ui and click Test Results.","title":"Openmrs 3.x"},{"location":"lis-workflows/lis-workflows.html#isanteplus","text":"Install iSantePlus using one of these approaches . Install the Following Modules FHIR2 module version >= 1.5.0 Lab on FHIR module IsantePlus FHIR Module Note : The above modules are installed by default by the docker setup Configure the required settings . labonfhir.openElisUrl ,The URL for the FHIR server where OpenELIS polls the Orders From. labonfhir.openElisUserUuid ,UUID for the service user that represents OpenELIS see more on Configuring the Lab On FHIR Modules. To place Lab Orders ,Fill the Laboratory Analysis Form , select OPenELIS as destination Lab and Save. Find Patient \u2192 Patient DashBord \u2192 Forms \u2192 Laboratory Analysis NB. The Patient Must have an active vist Start up the OpenELIS Update Task in order to poll for Completed Results from OpenELIS System Administration \u2192 Advanced Administration \u2192 Scheduler \u2192 Manage Scheduler To View The results ,Go to Laboratory History on the Patient DashBoard under General Actions. Find Patient \u2192 Patient DashBord \u2192 Laboratory History","title":"iSant\u00e9Plus"},{"location":"lis-workflows/lis-workflows.html#openelis-global-26x","text":"The FHIR based Lab Workflow is supported in OpenELIS 2.6 . Start an instance of OpenELIS with the following configuration properties set in the properties file. org.openelisglobal.fhirstore.uri=<localFhirServerUrl> . This is the Fhir Server that runs paralel with OPenELIS org.openelisglobal.remote.source.uri=<remoreFhirServerUr> . This is the Fhir server that the Lab on FHIR module points to ie via the labonfhir.openElisUrl org.openelisglobal.remote.source.updateStatus=true org.openelisglobal.remote.source.identifier=Practitioner/<userUuuid> .This is the UUID of the user who created the Order ie labonfhir.openElisUserUuid org.openelisglobal.task.useBasedOn=true org.openelisglobal.fhir.subscriber=h<remoreFhirServerUrl> . org.openelisglobal.fhir.subscriber.resources=Task,Patient,ServiceRequest,DiagnosticReport,Observation,Specimen,Practitioner,Encounter Ensure OpenELIS has the test that maps to the same LOINC code as the test Concept in OpenMRS. This can be added via the Admin page \u2192 Test Management \u2192 Add Tests Configure OpenELIS to accept electronic orders. Admin \u2192 Order Entry Configuration \u2192 external orders Search for the Electronic Orders ie Order \u2192 Electronic Orders and then Complete the Order Note that the user should have the right Lab Unit Priviledges to complete the Order After Results are captured and Validated , OpenELIS sends back the results to OpenMRS as a Diagnostic Report with an Observation","title":"OpenELIS Global 2.6.x"},{"location":"lis-workflows/overview.html","text":"You can view a video demo of the LIS-EMR exchange between OpenMRS(EMR) and OpenELIS here A critical workflow for high quality care is the timely and accurate exchange of laboratory orders and test results between the clinic and laboratories. To digitize this workflow, you need an electronic medical record (EMR) capable of capturing orders, and a laboratory information system (LIS/LIMS) capable of order entry and capturing of test results associated with that order. Using the most recent informatics standards, this digitized Lab Order and Results workflow SOP focuses on the use of FHIR and the OpenHIE architectural pattern for implementation, and includes several implementation approaches depending on context (i.e. direct bridge, older messaging standards only in the local systems). This Lab Order and Results workflow utilizes the FHIR Workflow Module and suggested Communication Patterns to implement the ordering of lab tests from an EMR to an LIS and resulting from LIS to EMR.","title":"Overview"},{"location":"mpi-workflows/demos.html","text":"SigDep3 Patient Import and OpenCR AutoMatching OpenCR Decision Rules Configuration and Matching","title":"Demos"},{"location":"mpi-workflows/dev-guide.html","text":"","title":"Dev guide"},{"location":"mpi-workflows/fhir-resources.html","text":"","title":"Fhir resources"},{"location":"mpi-workflows/overview.html","text":"","title":"Overview"}]}